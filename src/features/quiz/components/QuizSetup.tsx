import React, { useMemo, useState } from 'react';
import { QuizSetupConfig } from '../types';
import { FilterDropdown } from '../../../shared/ui/FilterDropdown';

interface QuizSetupProps {
  setup: QuizSetupConfig;
  onSetupChange: (setup: QuizSetupConfig) => void;
  allCategories: string[];
  allCountries: string[];
  onStartQuiz: () => void;
  canStart: boolean;
  checkStrictFilters: (setup: QuizSetupConfig, allCategories: string[], allCountries: string[]) => string[];
}

const QUESTION_TYPES = [
  { value: 'birthYear', label: '–£–≥–∞–¥–∞–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è' },
  { value: 'deathYear', label: '–£–≥–∞–¥–∞–π –≥–æ–¥ —Å–º–µ—Ä—Ç–∏' },
  { value: 'profession', label: '–£–≥–∞–¥–∞–π —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' },
  { value: 'country', label: '–£–≥–∞–¥–∞–π —Å—Ç—Ä–∞–Ω—É —Ä–æ–∂–¥–µ–Ω–∏—è' },
  { value: 'achievementsMatch', label: '–°–æ–ø–æ—Å—Ç–∞–≤—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è' },
  { value: 'birthOrder', label: '–†–∞—Å—Å—Ç–∞–≤—å –ø–æ –≥–æ–¥—É —Ä–æ–∂–¥–µ–Ω–∏—è' },
  { value: 'contemporaries', label: '–†–∞–∑–¥–µ–ª–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∏–∫–æ–≤' }
];

const QUESTION_TYPE_LABELS: { [key: string]: string } = {
  'birthYear': '–£–≥–∞–¥–∞–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è',
  'deathYear': '–£–≥–∞–¥–∞–π –≥–æ–¥ —Å–º–µ—Ä—Ç–∏',
  'profession': '–£–≥–∞–¥–∞–π —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
  'country': '–£–≥–∞–¥–∞–π —Å—Ç—Ä–∞–Ω—É —Ä–æ–∂–¥–µ–Ω–∏—è',
  'achievementsMatch': '–°–æ–ø–æ—Å—Ç–∞–≤—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 
  'birthOrder': '–†–∞—Å—Å—Ç–∞–≤—å –ø–æ –≥–æ–¥—É —Ä–æ–∂–¥–µ–Ω–∏—è',
  'contemporaries': '–†–∞–∑–¥–µ–ª–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∏–∫–æ–≤'
};

const QUESTION_COUNTS = [3, 5, 7, 10, 15, 20];

export const QuizSetup: React.FC<QuizSetupProps> = ({
  setup,
  onSetupChange,
  allCategories,
  allCountries,
  onStartQuiz,
  canStart,
  checkStrictFilters
}) => {
  const handleCountriesChange = (countries: string[]) => {
    onSetupChange({
      ...setup,
      selectedCountries: countries
    });
  };

  const handleCategoriesChange = (categories: string[]) => {
    onSetupChange({
      ...setup,
      selectedCategories: categories
    });
  };

  const handleQuestionTypesChange = (types: string[]) => {
    onSetupChange({
      ...setup,
      questionTypes: types
    });
  };

  const handleQuestionCountChange = (count: number) => {
    onSetupChange({
      ...setup,
      questionCount: count
    });
  };

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
  const [localTimeRange, setLocalTimeRange] = useState({
    start: setup.timeRange.start,
    end: setup.timeRange.end
  });

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ setup
  React.useEffect(() => {
    setLocalTimeRange({
      start: setup.timeRange.start,
      end: setup.timeRange.end
    });
  }, [setup.timeRange.start, setup.timeRange.end]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–≥–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const filterWarnings = useMemo(() => {
    return checkStrictFilters(setup, allCategories, allCountries);
  }, [setup, allCategories, allCountries, checkStrictFilters]);

  return (
    <div className="quiz-setup">
      <div className="quiz-setup-header">
        <h2 className="visually-hidden">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä—ã</h2>
        <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã</p>
      </div>

      <div className="quiz-setup-content">
        <div className="quiz-setup-columns">
          <div className="quiz-setup-col">
            <div className="quiz-setup-filter-group">
            <h3>–§–∏–ª—å—Ç—Ä—ã</h3>
            <div className="quiz-setup-filters-row">
              <FilterDropdown
                title="–°—Ç—Ä–∞–Ω—ã"
                items={allCountries}
                selectedItems={setup.selectedCountries}
                onSelectionChange={handleCountriesChange}
                icon="üåç"
              />
              <FilterDropdown
                title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
                items={allCategories}
                selectedItems={setup.selectedCategories}
                onSelectionChange={handleCategoriesChange}
                icon="üìö"
              />
            </div>
            <div className="quiz-setup-time-filter">
              <label className="quiz-time-label">–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥:</label>
              <div className="quiz-time-inputs">
                <input
                  type="number"
                  value={localTimeRange.start}
                  onChange={(e) => {
                    const value = parseInt(e.target.value) || -800;
                    setLocalTimeRange(prev => ({ ...prev, start: value }));
                  }}
                  onBlur={(e) => {
                    const value = parseInt(e.target.value) || -800;
                    if (value !== setup.timeRange.start) {
                      onSetupChange({
                        ...setup,
                        timeRange: { ...setup.timeRange, start: value }
                      });
                    }
                  }}
                  className="quiz-time-input"
                  placeholder="–û—Ç –≥–æ–¥–∞"
                />
                <span className="quiz-time-separator">‚Äî</span>
                <input
                  type="number"
                  value={localTimeRange.end}
                  onChange={(e) => {
                    const value = parseInt(e.target.value) || 2000;
                    setLocalTimeRange(prev => ({ ...prev, end: value }));
                  }}
                  onBlur={(e) => {
                    const value = parseInt(e.target.value) || 2000;
                    if (value !== setup.timeRange.end) {
                      onSetupChange({
                        ...setup,
                        timeRange: { ...setup.timeRange, end: value }
                      });
                    }
                  }}
                  className="quiz-time-input"
                  placeholder="–î–æ –≥–æ–¥–∞"
                />
              </div>
              <div className="quiz-time-presets">
                {[
                  { label: '–ê–Ω—Ç–∏—á–Ω–æ—Å—Ç—å', start: -800, end: 500 },
                  { label: '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ', start: 500, end: 1500 },
                  { label: '–ù–æ–≤–æ–µ –≤—Ä–µ–º—è', start: 1500, end: 1900 },
                  { label: 'XX –≤–µ–∫', start: 1900, end: 2000 },
                  { label: '–í—Å–µ —ç–ø–æ—Ö–∏', start: -800, end: 2000 }
                ].map(preset => (
                  <button
                    key={preset.label}
                    className={`quiz-time-preset ${setup.timeRange.start === preset.start && setup.timeRange.end === preset.end ? 'active' : ''}`}
                    onClick={() => {
                      setLocalTimeRange({ start: preset.start, end: preset.end });
                      onSetupChange({
                        ...setup,
                        timeRange: { start: preset.start, end: preset.end }
                      });
                    }}
                  >
                    {preset.label}
                  </button>
                ))}
              </div>
            </div>
            </div>
          </div>

          <div className="quiz-setup-col">
            <div className="quiz-setup-filter-group">
              <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤</h3>
              <div className="quiz-setup-questions-row">
                <div className="quiz-setup-question-types">
                  <label className="quiz-types-label">–¢–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</label>
                  <div className="quiz-types-controls">
                    <button
                      type="button"
                      className="quiz-types-control-btn"
                      onClick={() => handleQuestionTypesChange(QUESTION_TYPES.map(t => t.value))}
                    >
                      –í—ã–±—Ä–∞—Ç—å –≤—Å–µ
                    </button>
                    <button
                      type="button"
                      className="quiz-types-control-btn"
                      onClick={() => handleQuestionTypesChange([])}
                    >
                      –°–Ω—è—Ç—å –≤—Å–µ
                    </button>
                  </div>
                  <div className="quiz-types-checkboxes">
                    {QUESTION_TYPES.map((questionType) => {
                      const isSelected = setup.questionTypes.includes(questionType.value);
                      return (
                        <label key={questionType.value} className="quiz-type-checkbox-label">
                          <input
                            type="checkbox"
                            checked={isSelected}
                            onChange={(e) => {
                              if (e.target.checked) {
                                handleQuestionTypesChange([...setup.questionTypes, questionType.value]);
                              } else {
                                handleQuestionTypesChange(setup.questionTypes.filter(type => type !== questionType.value));
                              }
                            }}
                            className="quiz-type-checkbox"
                          />
                          <span className="quiz-type-checkbox-text">{questionType.label}</span>
                        </label>
                      );
                    })}
                  </div>
                </div>
                <div className="quiz-setup-question-count">
                  <label className="quiz-count-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</label>
                  <div className="quiz-setup-count-selector">
                    {QUESTION_COUNTS.map(count => (
                      <button
                        key={count}
                        className={`quiz-count-button ${setup.questionCount === count ? 'selected' : ''}`}
                        onClick={() => handleQuestionCountChange(count)}
                      >
                        {count}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {filterWarnings.length > 0 && (
        <div className="quiz-fallback-warning">
          <div className="quiz-warning-icon">‚ÑπÔ∏è</div>
          <div className="quiz-warning-content">
            <div className="quiz-warning-text">
              –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:
              <ul className="quiz-warning-list">
                {filterWarnings.map((warning, index) => (
                  <li key={index}>{warning}</li>
                ))}
              </ul>
              –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ —Å–º–æ–≥—É—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –≤–æ–ø—Ä–æ—Å–∞–º–∏ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞.
            </div>
          </div>
        </div>
      )}

      <div className="quiz-setup-footer">
        <button 
          onClick={onStartQuiz}
          disabled={!canStart}
          className="quiz-start-button"
        >
          –ù–∞—á–∞—Ç—å –∏–≥—Ä—É ({setup.questionCount} –≤–æ–ø—Ä–æ—Å–æ–≤)
        </button>
      </div>
    </div>
  );
};
