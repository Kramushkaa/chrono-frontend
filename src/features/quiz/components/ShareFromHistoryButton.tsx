import React, { useState } from 'react';
import { useSharedQuiz } from '../hooks/useSharedQuiz';
import { useAuthUser } from 'shared/context/AuthContext';
import { QuizAuthModal } from './QuizAuthModal';
import { getQuizAttemptDetail } from 'shared/api/quiz';
import type { QuizSetupConfig, QuizQuestion } from '../types';

interface ShareFromHistoryButtonProps {
  attemptId: number;
  isShared: boolean;
  shareCode?: string;
  quizTitle: string;
}

export const ShareFromHistoryButton: React.FC<ShareFromHistoryButtonProps> = ({
  attemptId,
  isShared,
  shareCode,
  quizTitle,
}) => {
  const { createSharedQuiz, loading } = useSharedQuiz();
  const { user, isAuthenticated } = useAuthUser();
  const [showModal, setShowModal] = useState(false);
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [newShareCode, setNewShareCode] = useState<string | null>(null);
  const [shareUrl, setShareUrl] = useState<string | null>(null);
  const [title, setTitle] = useState('');
  const [loadingQuestions, setLoadingQuestions] = useState(false);

  const handleButtonClick = async () => {
    if (!isAuthenticated) {
      setShowAuthModal(true);
      return;
    }

    if (isShared && shareCode) {
      // –î–ª—è —á—É–∂–æ–≥–æ –∫–≤–∏–∑–∞ - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
      const fullUrl = `${window.location.origin}/quiz/${shareCode}`;
      setShareUrl(fullUrl);
      setNewShareCode(shareCode);
      setShowModal(true);
    } else {
      // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∫–≤–∏–∑–∞ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π shared –∫–≤–∏–∑
      const userName = user?.full_name || user?.username || user?.email?.split('@')[0] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
      setTitle(`–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ${userName}`);
      setShowModal(true);
    }
  };

  const handleCreateShare = async () => {
    if (!title.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞');
      return;
    }

    try {
      setLoadingQuestions(true);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–ø—ã—Ç–∫–∏, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã
      const attemptDetail = await getQuizAttemptDetail(attemptId);
      
      if (!attemptDetail.data.detailedAnswers || attemptDetail.data.detailedAnswers.length === 0) {
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫–≤–∏–∑–∞');
        return;
      }

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ detailedAnswers
      const questions: QuizQuestion[] = attemptDetail.data.detailedAnswers.map((answer: any) => ({
        id: answer.questionId,
        type: answer.questionType,
        question: answer.question,
        correctAnswer: answer.correctAnswer,
        explanation: answer.explanation,
        data: answer.data,
        options: answer.options,
      }));

      // –ü–æ–ª—É—á–∞–µ–º config –∏–∑ –ø–æ–ø—ã—Ç–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
      const config: QuizSetupConfig = (attemptDetail.data as any).attempt?.config || {
        selectedCountries: [],
        selectedCategories: [],
        questionTypes: [],
        questionCount: questions.length,
        timeRange: { start: -3000, end: 2024 },
      };

      // –°–æ–∑–¥–∞–µ–º shared –∫–≤–∏–∑ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è
      const result = await createSharedQuiz(
        title.trim(),
        undefined,
        config,
        questions,
        {
          correctAnswers: attemptDetail.data.results.correctAnswers,
          totalQuestions: attemptDetail.data.results.totalQuestions,
          totalTimeMs: attemptDetail.data.results.totalTimeMs,
          answers: attemptDetail.data.detailedAnswers.map((answer: any) => ({
            questionId: answer.questionId,
            answer: answer.userAnswer,
            isCorrect: answer.isCorrect,
            timeSpent: answer.timeSpent,
          })),
        }
      );

      if (result) {
        const fullUrl = `${window.location.origin}/quiz/${result.shareCode}`;
        setNewShareCode(result.shareCode);
        setShareUrl(fullUrl);
      } else {
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–≤–∏–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.');
      }
    } catch (error) {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Error creating shared quiz:', error);
      }
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–∏–∑–∞: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    } finally {
      setLoadingQuestions(false);
    }
  };

  const handleCopyLink = () => {
    if (shareUrl) {
      navigator.clipboard.writeText(shareUrl);
      alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    }
  };

  const handleClose = () => {
    setShowModal(false);
    setNewShareCode(null);
    setShareUrl(null);
    setTitle('');
  };

  const handleAuthSuccess = () => {
    setShowAuthModal(false);
    // –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
    handleButtonClick();
  };

  return (
    <>
      <button
        onClick={handleButtonClick}
        className="quiz-button quiz-button-secondary quiz-history-share-button"
        title="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–≤–∏–∑–æ–º"
      >
        üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
      </button>

      <QuizAuthModal
        isOpen={showAuthModal}
        onClose={() => setShowAuthModal(false)}
        onSuccess={handleAuthSuccess}
        message="–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è shared-–∫–≤–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
      />

      {showModal && (
        <div className="quiz-modal-overlay" onClick={handleClose}>
          <div className="quiz-modal" onClick={(e) => e.stopPropagation()}>
            {!newShareCode ? (
              <>
                <h3>–°–æ–∑–¥–∞—Ç—å –∫–≤–∏–∑ –¥–ª—è –¥—Ä—É–∑–µ–π</h3>
                <p className="quiz-modal-description">
                  –°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–≤–∏–∑ "{quizTitle}", —á—Ç–æ–±—ã –≤–∞—à–∏ –¥—Ä—É–∑—å—è –º–æ–≥–ª–∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ –∂–µ
                  —Å–∞–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ—Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ!
                </p>

                <div className="quiz-form-group">
                  <label htmlFor="quiz-title">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞ *</label>
                  <input
                    id="quiz-title"
                    type="text"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞"
                    className="quiz-input"
                    maxLength={100}
                    autoFocus
                  />
                </div>

                <div className="quiz-modal-actions">
                  <button
                    onClick={handleCreateShare}
                    disabled={loading || loadingQuestions || !title.trim()}
                    className="quiz-button quiz-button-primary"
                  >
                    {loadingQuestions ? '–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...' : loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É'}
                  </button>
                  <button
                    onClick={handleClose}
                    className="quiz-button quiz-button-secondary"
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                </div>
              </>
            ) : (
              <>
                <h3>–ö–≤–∏–∑ —Å–æ–∑–¥–∞–Ω!</h3>
                <p className="quiz-modal-description">
                  –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏:
                </p>

                <div className="quiz-share-link-container">
                  <div className="quiz-share-code">
                    <strong>–ö–æ–¥:</strong> {newShareCode}
                  </div>
                  <div className="quiz-share-url">
                    <input
                      type="text"
                      value={shareUrl || ''}
                      readOnly
                      className="quiz-input"
                    />
                  </div>
                </div>

                <div className="quiz-modal-actions">
                  <button
                    onClick={handleCopyLink}
                    className="quiz-button quiz-button-primary"
                  >
                    –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
                  </button>
                  <button
                    onClick={handleClose}
                    className="quiz-button quiz-button-secondary"
                  >
                    –ó–∞–∫—Ä—ã—Ç—å
                  </button>
                </div>
              </>
            )}
          </div>
        </div>
      )}
    </>
  );
};

