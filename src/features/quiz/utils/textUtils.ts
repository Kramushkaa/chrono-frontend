/**
 * Скрывает все 4-значные числа (годы) и любые римские числа, выступающие отдельными токенами,
 * заменяя их на нейтральные символы. Римские числа заменяются на "**" независимо от длины,
 * слово рядом (например, "век", "века", "веков") не меняется.
 * @param text - исходный текст
 * @returns текст с скрытыми годами и римскими числами
 */
export const hideYearsInText = (text: string): string => {
  // Регулярное выражение для поиска 4-значных чисел (годы)
  const yearRegex = /\b\d{4}\b/g;
  
  // Римские числа как отдельные токены, ограниченные пробелом, началом/концом строки или пунктуацией
  // Пример совпадений: "X", "XIX", "XVIII", в контексте: "X век", ", XIX,", "(VI)"
  // Не трогает встраивания внутри слов, так как требуется разделитель до/после
  const romanTokenRegex = /(^|[\s.,;:!?()\]{}"'«»\-–—[])([IVXLCDM]+)(?=($|[\s.,;:!?()\]{}"'«»\-–—[]))/g;
  
  // Сначала скрываем римские числа, заменяя сам токен на "**" и сохраняя ведущий разделитель
  let result = text.replace(romanTokenRegex, (_match, leading) => `${leading}**`);
  
  // Затем скрываем годы, заменяя на "****"
  result = result.replace(yearRegex, '****');
  
  return result;
};

/**
 * Проверяет, содержит ли текст 4-значные числа (годы) или римские числа как отдельные токены
 * @param text - текст для проверки
 * @returns true, если в тексте есть годы или римские токены
 */
export const hasYearsInText = (text: string): boolean => {
  const yearRegex = /\b\d{4}\b/g;
  const romanTokenRegex = /(^|[\s.,;:!?()\]{}"'«»\-–—[])[IVXLCDM]+(?=($|[\s.,;:!?()\]{}"'«»\-–—[]))/g;
  return yearRegex.test(text) || romanTokenRegex.test(text);
};



