import React, { useState, useEffect } from 'react';
import { getBackendInfo, testBackendConnection } from '../services/api';
import './BackendInfo.css';

interface BackendInfoProps {
  className?: string;
}

export const BackendInfo: React.FC<BackendInfoProps> = ({ className = '' }) => {
  const backendInfo = getBackendInfo();
  const env = (typeof process !== 'undefined' && (process as any).env) || {};
  const isDev = env.NODE_ENV === 'development';
  const useLocal = env.REACT_APP_USE_LOCAL_BACKEND === 'true';
  const showOverride = env.REACT_APP_SHOW_BACKEND_INFO === 'true';
  const isLocalHost = typeof window !== 'undefined' && /^(localhost|127\.0\.0\.1)$/i.test(window.location.hostname);
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –¥–µ–≤–µ/–ª–æ–∫–∞–ª–µ/override
  const shouldHide = !showOverride && !(isDev || useLocal || backendInfo.isLocal || isLocalHost);
  const [isConnected, setIsConnected] = useState<boolean | null>(null);
  const [isTesting, setIsTesting] = useState(false);
  const [showDetails, setShowDetails] = useState(false);

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (!shouldHide) {
      testConnection();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [backendInfo.baseUrl, shouldHide]);

  const testConnection = async () => {
    setIsTesting(true);
    try {
      const connected = await testBackendConnection();
      setIsConnected(connected);
    } catch (error) {
      console.error('Connection test failed:', error);
      setIsConnected(false);
    } finally {
      setIsTesting(false);
    }
  };

  if (shouldHide) return null;

  const getStatusIcon = () => {
    if (isTesting) return 'üîÑ';
    if (isConnected === null) return '‚ùì';
    return isConnected ? '‚úÖ' : '‚ùå';
  };

  const getStatusText = () => {
    if (isTesting) return '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
    if (isConnected === null) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    return isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω';
  };

  const getBackendType = () => {
    return backendInfo.isLocal ? '–õ–æ–∫–∞–ª—å–Ω—ã–π' : '–£–¥–∞–ª–µ–Ω–Ω—ã–π';
  };

  const getBackendColor = () => {
    return backendInfo.isLocal ? '#4CAF50' : '#2196F3';
  };

  return (
    <div className={`backend-info ${className}`}>
      <div className="backend-header" onClick={() => setShowDetails(!showDetails)}>
        <div className="backend-status">
          <span className="status-icon">{getStatusIcon()}</span>
          <span className="status-text">{getStatusText()}</span>
        </div>
        <div className="backend-type" style={{ color: getBackendColor() }}>
          {getBackendType()} Backend
        </div>
        <button 
          className="test-button"
          onClick={(e) => {
            e.stopPropagation();
            testConnection();
          }}
          disabled={isTesting}
        >
          {isTesting ? 'üîÑ' : 'üîÑ'}
        </button>
      </div>

      {showDetails && (
        <div className="backend-details">
          <div className="detail-item">
            <strong>URL:</strong> {backendInfo.baseUrl}
          </div>
          <div className="detail-item">
            <strong>–¢–∏–ø:</strong> {getBackendType()}
          </div>
          <div className="detail-item">
            <strong>–°—Ç–∞—Ç—É—Å:</strong> {getStatusText()}
          </div>
          <div className="detail-item">
            <strong>–¢–∞–π–º–∞—É—Ç:</strong> {backendInfo.config.timeout}ms
          </div>
          <div className="detail-item">
            <strong>–ü–æ–≤—Ç–æ—Ä—ã:</strong> {backendInfo.config.retries}
          </div>
          
          <div className="backend-tips">
            <h4>üí° –ö–∞–∫ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è:</h4>
            <ul>
              <li>–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª <code>.env.local</code> –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞</li>
              <li>–î–æ–±–∞–≤—å—Ç–µ: <code>REACT_APP_USE_LOCAL_BACKEND=true</code></li>
              <li>–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</li>
              <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001</li>
            </ul>
          </div>
        </div>
      )}
    </div>
  );
}; 