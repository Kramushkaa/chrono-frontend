import React, { useCallback } from 'react'
import { useToast } from 'shared/context/ToastContext'
import { BrandTitle } from 'shared/ui/BrandTitle'
import { UserMenu } from 'shared/ui/UserMenu'
import { DesktopHeaderControls } from './components/DesktopHeaderControls'
import { MobileHeaderControls } from './components/MobileHeaderControls'
import { Person } from 'shared/types'

interface FiltersState {
  showAchievements: boolean
  hideEmptyCenturies: boolean
  categories: string[]
  countries: string[]
  timeRange: { start: number; end: number }
}

interface AppHeaderProps {
  isScrolled: boolean
  showControls: boolean
  setShowControls: (show: boolean) => void
  mode?: 'full' | 'minimal'
  filters: {
    showAchievements: boolean
    hideEmptyCenturies: boolean
    categories: string[]
    countries: string[]
  }
  setFilters: (filters: FiltersState | ((prev: FiltersState) => FiltersState)) => void
  groupingType: 'category' | 'country' | 'none'
  setGroupingType: (type: 'category' | 'country' | 'none') => void
  allCategories: string[]
  allCountries: string[]
  yearInputs: { start: string; end: string }
  setYearInputs: (inputs: { start: string; end: string } | ((prev: { start: string; end: string }) => { start: string; end: string })) => void
  applyYearFilter: (field: 'start' | 'end', value: string) => void
  handleYearKeyPress: (field: 'start' | 'end', e: React.KeyboardEvent<HTMLInputElement>) => void
  resetAllFilters: () => void
  getCategoryColor: (category: string) => string
  sortedData: Person[]
  handleSliderMouseDown: (e: React.MouseEvent | React.TouchEvent, handle: 'start' | 'end') => void
  handleSliderMouseMove: (e: MouseEvent | TouchEvent, yearInputs: { start: string; end: string }, applyYearFilter: (field: 'start' | 'end', value: string) => void, setYearInputs: (inputs: { start: string; end: string } | ((prev: { start: string; end: string }) => { start: string; end: string })) => void) => void
  handleSliderMouseUp: () => void
  isDraggingSlider: boolean
  onBackToMenu?: () => void
  extraRightControls?: React.ReactNode
  extraFilterControls?: React.ReactNode
}

export const AppHeader: React.FC<AppHeaderProps> = React.memo(({
  isScrolled,
  showControls,
  setShowControls,
  mode = 'full',
  filters,
  setFilters,
  groupingType,
  setGroupingType,
  allCategories,
  allCountries,
  yearInputs,
  setYearInputs,
  applyYearFilter,
  handleYearKeyPress,
  resetAllFilters,
  getCategoryColor,
  sortedData,
  handleSliderMouseDown,
  handleSliderMouseMove,
  handleSliderMouseUp,
  isDraggingSlider,
  onBackToMenu,
  extraRightControls,
  extraFilterControls
}) => {

  const { showToast } = useToast()

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–µ–∫–∞" —Å —Å–±—Ä–æ—Å–æ–º –¥–∞—Ç
  const handleHideEmptyCenturiesToggle = useCallback(() => {
    const newHideEmptyCenturies = !filters.hideEmptyCenturies;
    
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–µ–∫–∞" (hideEmptyCenturies = false), —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    if (!newHideEmptyCenturies) {
      setYearInputs({ start: '-800', end: '2000' });
      applyYearFilter('start', '-800');
      applyYearFilter('end', '2000');
    }
    
    setFilters((prev: FiltersState) => ({ ...prev, hideEmptyCenturies: newHideEmptyCenturies }));
  }, [filters.hideEmptyCenturies, setFilters, setYearInputs, applyYearFilter]);





  return (
    <header 
      className={`app-header ${isScrolled ? 'scrolled' : ''}`}
      id="app-header"
      role="banner"
              aria-label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –•—Ä–æ–Ω–æ–Ω–∏–Ω–¥–∑—è"
      style={{
        padding: isScrolled ? '0.5rem 1rem' : '0.75rem 1rem',
        transition: 'all 0.3s ease'
      }}
    >
      <div className="header-row" role="navigation" aria-label="–û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è">
        <h1 className="header-title" id="app-title" style={{ 
          fontSize: isScrolled ? '1.5rem' : '1.8rem',
          margin: 0,
          transition: 'font-size 0.3s ease',
          fontWeight: 'bold',
          color: '#f4e4c1',
          flexShrink: 0
        }}>
          <BrandTitle asLink />
        </h1>
        
        {extraRightControls && (
          <div style={{ marginLeft: '0.5rem' }}>
            {extraRightControls}
          </div>
        )}

        {mode === 'full' && (
          <DesktopHeaderControls
            filters={filters}
            setFilters={setFilters}
            groupingType={groupingType}
            setGroupingType={setGroupingType}
            allCategories={allCategories}
            allCountries={allCountries}
            yearInputs={yearInputs}
            setYearInputs={setYearInputs}
            applyYearFilter={applyYearFilter}
            handleYearKeyPress={handleYearKeyPress}
            resetAllFilters={resetAllFilters}
            getCategoryColor={getCategoryColor}
            handleSliderMouseDown={handleSliderMouseDown}
            handleSliderMouseMove={handleSliderMouseMove}
            handleSliderMouseUp={handleSliderMouseUp}
            isDraggingSlider={isDraggingSlider}
            extraFilterControls={extraFilterControls}
            handleHideEmptyCenturiesToggle={handleHideEmptyCenturiesToggle}
          />
        )}

        {mode === 'full' && (
        <button
          className="filters-toggle-btn"
          id="filters-toggle"
          aria-label={showControls ? '–°–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã' : '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã'}
          aria-expanded={showControls}
          aria-controls="header-controls-mobile"
          onClick={() => setShowControls(!showControls)}
          style={{
            padding: '0.3rem 0.6rem',
            background: showControls ? '#cd853f' : 'rgba(244, 228, 193, 0.2)',
            border: `1px solid ${showControls ? 'rgba(205, 133, 63, 0.4)' : 'rgba(244, 228, 193, 0.3)'}`,
            borderRadius: '4px',
            color: '#f4e4c1',
            fontSize: '0.7rem',
            cursor: 'pointer',
            transition: 'all 0.2s ease',
            opacity: showControls ? 1 : 0.6
          }}
          title={showControls ? '–°–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã' : '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã'}
        >
          ‚öôÔ∏è
        </button>
        )}

        {/* –ü—Ä–æ—Ñ–∏–ª—å –∏, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" —Å–ø—Ä–∞–≤–∞ */}
        {onBackToMenu && (
          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem', marginLeft: 'auto' }}>
            <button
              onClick={onBackToMenu}
              style={{
                padding: '0.4rem 0.8rem',
                background: 'rgba(205, 133, 63, 0.2)',
                border: '1px solid rgba(205, 133, 63, 0.4)',
                borderRadius: '6px',
                color: '#cd853f',
                fontSize: '0.8rem',
                cursor: 'pointer',
                transition: 'all 0.2s ease',
                display: 'flex',
                alignItems: 'center',
                gap: '0.3rem',
                fontWeight: 'bold'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.background = 'rgba(205, 133, 63, 0.3)'
                e.currentTarget.style.borderColor = 'rgba(205, 133, 63, 0.6)'
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.background = 'rgba(205, 133, 63, 0.2)'
                e.currentTarget.style.borderColor = 'rgba(205, 133, 63, 0.4)'
              }}
              title="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
              aria-label="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            >
              –ú–µ–Ω—é
            </button>
            <UserMenu />
          </div>
        )}

        {/* –ü—Ä–æ—Ñ–∏–ª—å —Å–ø—Ä–∞–≤–∞, –µ—Å–ª–∏ –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ */}
        {!onBackToMenu && (
          <div style={{ marginLeft: 'auto' }}>
            <UserMenu />
          </div>
        )}
        {mode === 'full' && (
        <div className="share-buttons" style={{
          display: 'none',
          gap: '0.5rem',
          alignItems: 'center',
          marginLeft: 'auto',
          marginRight: '1rem'
        }}>
          <button
            onClick={() => {
              if (navigator.share) {
                navigator.share({
                  title: '–•—Ä–æ–Ω–æ–Ω–∏–Ω–¥–∑—è ‚Äî –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π',
                  text: '–ò–∑—É—á–∞–π—Ç–µ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤—ã–¥–∞—é—â–∏—Ö—Å—è –ª–∏—á–Ω–æ—Å—Ç–µ–π —Ä–∞–∑–Ω—ã—Ö —ç–ø–æ—Ö',
                  url: window.location.href
                });
              } else {
                // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ Web Share API
                navigator.clipboard.writeText(window.location.href);
                showToast('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'info')
              }
            }}
            style={{
              padding: '0.4rem 0.6rem',
              background: 'rgba(52, 152, 219, 0.2)',
              border: '1px solid rgba(52, 152, 219, 0.4)',
              borderRadius: '4px',
              color: '#3498db',
              fontSize: '0.7rem',
              cursor: 'pointer',
              transition: 'all 0.2s ease',
              display: 'flex',
              alignItems: 'center',
              gap: '0.3rem'
            }}
            title="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
            aria-label="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
          >
            üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
          </button>
          
              <button
            onClick={() => {
                const url = `https://twitter.com/intent/tweet?text=${encodeURIComponent('–ò–∑—É—á–∞—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ —Å –•—Ä–æ–Ω–æ–Ω–∏–Ω–¥–∑—è!')}&url=${encodeURIComponent(window.location.href)}`;
              window.open(url, '_blank');
            }}
            style={{
              padding: '0.4rem 0.6rem',
              background: 'rgba(29, 161, 242, 0.2)',
              border: '1px solid rgba(29, 161, 242, 0.4)',
              borderRadius: '4px',
              color: '#1da1f2',
              fontSize: '0.7rem',
              cursor: 'pointer',
              transition: 'all 0.2s ease'
            }}
            title="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Twitter"
            aria-label="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Twitter"
          >
            üê¶
          </button>
          
          <button
            onClick={() => {
              const url = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(window.location.href)}`;
              window.open(url, '_blank');
            }}
            style={{
              padding: '0.4rem 0.6rem',
              background: 'rgba(66, 103, 178, 0.2)',
              border: '1px solid rgba(66, 103, 178, 0.4)',
              borderRadius: '4px',
              color: '#4267b2',
              fontSize: '0.7rem',
              cursor: 'pointer',
              transition: 'all 0.2s ease'
            }}
            title="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Facebook"
            aria-label="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Facebook"
          >
            üìò
          </button>
        </div>
        )}
      </div>

      {mode === 'full' && (
        <MobileHeaderControls
          showControls={showControls}
          filters={filters}
          setFilters={setFilters}
          groupingType={groupingType}
          setGroupingType={setGroupingType}
          allCategories={allCategories}
          allCountries={allCountries}
          yearInputs={yearInputs}
          setYearInputs={setYearInputs}
          applyYearFilter={applyYearFilter}
          handleYearKeyPress={handleYearKeyPress}
          resetAllFilters={resetAllFilters}
          getCategoryColor={getCategoryColor}
          handleSliderMouseDown={handleSliderMouseDown}
          handleSliderMouseMove={handleSliderMouseMove}
          handleSliderMouseUp={handleSliderMouseUp}
          isDraggingSlider={isDraggingSlider}
          extraFilterControls={extraFilterControls}
          handleHideEmptyCenturiesToggle={handleHideEmptyCenturiesToggle}
        />
      )}
    </header>
  )
})