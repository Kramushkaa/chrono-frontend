{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Selecty\\\\Documents\\\\PetProjects\\\\chronoline-frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { AppHeader } from './components/AppHeader';\nimport { Timeline } from './components/Timeline';\nimport { Tooltips } from './components/Tooltips';\nimport { MobilePersonPanel } from './components/MobilePersonPanel';\nimport { useTimelineData } from './hooks/useTimelineData';\nimport { useFilters } from './hooks/useFilters';\nimport { useSlider } from './hooks/useSlider';\nimport { useTooltip } from './hooks/useTooltip';\nimport { generateCenturyBoundaries, getFirstCountry } from './utils/timelineUtils';\nimport { getGroupColor, getGroupColorDark, getGroupColorMuted, getPersonGroup, sortGroupedData } from './utils/groupingUtils';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [activeAchievementMarker, setActiveAchievementMarker] = useState(null);\n  const [selectedPerson, setSelectedPerson] = useState(null);\n  const [showControls, setShowControls] = useState(true);\n\n  // Используем кастомные хуки\n  const {\n    filters,\n    setFilters,\n    groupingType,\n    setGroupingType,\n    yearInputs,\n    setYearInputs,\n    applyYearFilter,\n    handleYearKeyPress,\n    resetAllFilters\n  } = useFilters();\n  const {\n    persons,\n    allCategories,\n    allCountries,\n    isLoading\n  } = useTimelineData(filters);\n  const {\n    isDraggingSlider,\n    handleSliderMouseDown,\n    handleSliderMouseMove,\n    handleSliderMouseUp\n  } = useSlider();\n  const {\n    hoveredPerson,\n    mousePosition,\n    showTooltip,\n    hoveredAchievement,\n    achievementTooltipPosition,\n    showAchievementTooltip,\n    hoverTimerRef,\n    handlePersonHover,\n    handleAchievementHover\n  } = useTooltip();\n\n  // Добавляем обработчики событий мыши и touch\n  useEffect(() => {\n    if (isDraggingSlider) {\n      const handleMouseMove = e => handleSliderMouseMove(e, yearInputs, applyYearFilter, setYearInputs);\n      const handleMouseUp = () => handleSliderMouseUp();\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      document.addEventListener('touchmove', handleMouseMove);\n      document.addEventListener('touchend', handleMouseUp);\n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n        document.removeEventListener('touchmove', handleMouseMove);\n        document.removeEventListener('touchend', handleMouseUp);\n      };\n    }\n  }, [isDraggingSlider, handleSliderMouseMove, handleSliderMouseUp, yearInputs, applyYearFilter, setYearInputs, setFilters]);\n\n  // Функция фильтрации данных (теперь данные фильтруются на бэкенде, но сортировка остается)\n  const sortedData = sortGroupedData(persons, groupingType);\n\n  // Автоматически обновляем диапазон дат при изменении настройки скрытия пустых веков\n  useEffect(() => {\n    if (filters.hideEmptyCenturies && sortedData.length > 0) {\n      // Вычисляем эффективный диапазон на основе отфильтрованных данных\n      const effectiveMinYear = Math.min(...sortedData.map(p => p.birthYear));\n      const effectiveMaxYear = Math.max(...sortedData.map(p => p.deathYear));\n\n      // Проверяем, есть ли активные фильтры (категории или страны)\n      const hasActiveFilters = filters.categories.length > 0 || filters.countries.length > 0;\n      let newTimeRange = {\n        ...filters.timeRange\n      };\n      if (hasActiveFilters) {\n        // Если есть активные фильтры, сужаем диапазон до отфильтрованных данных\n        newTimeRange = {\n          start: Math.max(filters.timeRange.start, effectiveMinYear),\n          end: Math.min(filters.timeRange.end, effectiveMaxYear)\n        };\n      } else {\n        // Если нет активных фильтров, НЕ сужаем диапазон\n        // Пользователь может хотеть видеть данные за пределами текущего диапазона\n        newTimeRange = filters.timeRange;\n      }\n\n      // Обновляем только если диапазон изменился\n      if (newTimeRange.start !== filters.timeRange.start || newTimeRange.end !== filters.timeRange.end) {\n        setFilters(prev => ({\n          ...prev,\n          timeRange: newTimeRange\n        }));\n\n        // Обновляем поля ввода\n        setYearInputs({\n          start: newTimeRange.start.toString(),\n          end: newTimeRange.end.toString()\n        });\n      }\n    }\n  }, [filters.hideEmptyCenturies, sortedData, filters.categories, filters.countries, filters.timeRange]);\n\n  // Отслеживаем скролл\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n      setIsScrolled(scrollTop > 50);\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  // Обработчик для закрытия achievement tooltip на мобильных\n  useEffect(() => {\n    const handleCloseAchievementTooltip = () => {\n      handleAchievementHover(null, 0, 0);\n    };\n    const handleClickOutside = event => {\n      // Проверяем, что клик был вне tooltip'а и вне маркеров достижений\n      const target = event.target;\n      const tooltip = document.getElementById('achievement-tooltip');\n      const isClickInsideTooltip = tooltip === null || tooltip === void 0 ? void 0 : tooltip.contains(target);\n      const isClickOnMarker = target.closest('.achievement-marker');\n\n      // Добавляем небольшую задержку для touch событий, чтобы избежать случайного закрытия\n      if (!isClickInsideTooltip && !isClickOnMarker && showAchievementTooltip) {\n        if (event.type === 'touchstart') {\n          setTimeout(() => {\n            handleAchievementHover(null, 0, 0);\n          }, 100);\n        } else {\n          handleAchievementHover(null, 0, 0);\n        }\n      }\n    };\n    window.addEventListener('closeAchievementTooltip', handleCloseAchievementTooltip);\n    document.addEventListener('mousedown', handleClickOutside);\n    document.addEventListener('touchstart', handleClickOutside);\n    return () => {\n      window.removeEventListener('closeAchievementTooltip', handleCloseAchievementTooltip);\n      document.removeEventListener('mousedown', handleClickOutside);\n      document.removeEventListener('touchstart', handleClickOutside);\n    };\n  }, [handleAchievementHover, showAchievementTooltip]);\n\n  // Вычисляем реальный диапазон лет из отфильтрованных данных\n  const minYear = Math.min(...sortedData.map(p => p.birthYear), filters.timeRange.start);\n  const maxYear = Math.max(...sortedData.map(p => p.deathYear), filters.timeRange.end);\n  const totalYears = maxYear - minYear;\n\n  // Настройки масштаба\n  const pixelsPerYear = 3; // 3 пикселя на год\n  const LEFT_PADDING_PX = 30; // отступ слева, чтобы крайняя левая подпись не упиралась в край\n  const timelineWidth = totalYears * pixelsPerYear + LEFT_PADDING_PX;\n\n  // Генерируем границы веков\n  // Если включена настройка скрытия пустых веков, используем только отфильтрованные данные\n  const effectiveMinYear = filters.hideEmptyCenturies ? Math.min(...sortedData.map(p => p.birthYear)) : minYear;\n  const effectiveMaxYear = filters.hideEmptyCenturies ? Math.max(...sortedData.map(p => p.deathYear)) : maxYear;\n  const centuryBoundaries = generateCenturyBoundaries(effectiveMinYear, effectiveMaxYear);\n\n  // Алгоритм размещения полосок на строках с полной группировкой по категориям\n  const calculateRowPlacement = people => {\n    const rows = [];\n    if (groupingType === 'none') {\n      // Без группировки - просто размещаем всех в строки\n      const allRows = [];\n      people.forEach(person => {\n        let placed = false;\n\n        // Проверяем каждую существующую строку\n        for (let rowIndex = 0; rowIndex < allRows.length; rowIndex++) {\n          const row = allRows[rowIndex];\n          let canPlaceInRow = true;\n\n          // Проверяем, не пересекается ли с кем-то в этой строке\n          for (const existingPerson of row) {\n            const BUFFER = 20; // минимальный зазор между персонами\n            if (person.birthYear - BUFFER <= existingPerson.deathYear && person.deathYear + BUFFER >= existingPerson.birthYear) {\n              canPlaceInRow = false;\n              break;\n            }\n          }\n\n          // Если можно разместить в этой строке\n          if (canPlaceInRow) {\n            allRows[rowIndex].push(person);\n            placed = true;\n            break;\n          }\n        }\n\n        // Если не удалось разместить в существующих строках, создаем новую\n        if (!placed) {\n          allRows.push([person]);\n        }\n      });\n      return allRows;\n    }\n\n    // Группировка по категориям или странам\n    const groupField = groupingType === 'category' ? 'category' : 'country';\n    const allGroups = groupingType === 'category' ? allCategories : allCountries;\n    const groups = {};\n\n    // Группируем людей по выбранному полю\n    people.forEach(person => {\n      let groupValue;\n      if (groupField === 'country') {\n        // Для стран берем первую из списка, если есть несколько через \"/\"\n        groupValue = getFirstCountry(person.country);\n      } else {\n        groupValue = person[groupField];\n      }\n      if (!groups[groupValue]) {\n        groups[groupValue] = [];\n      }\n      groups[groupValue].push(person);\n    });\n\n    // Обрабатываем каждую группу в заданном порядке\n    allGroups.forEach(groupValue => {\n      if (groups[groupValue]) {\n        const groupPeople = groups[groupValue];\n        const groupRows = [];\n\n        // Размещаем людей данной группы в отдельные строки\n        groupPeople.forEach(person => {\n          let placed = false;\n\n          // Проверяем каждую существующую строку для этой группы\n          for (let rowIndex = 0; rowIndex < groupRows.length; rowIndex++) {\n            const row = groupRows[rowIndex];\n            let canPlaceInRow = true;\n\n            // Проверяем, не пересекается ли с кем-то в этой строке\n            for (const existingPerson of row) {\n              const BUFFER = 20; // минимальный зазор между персонами\n              if (person.birthYear - BUFFER <= existingPerson.deathYear && person.deathYear + BUFFER >= existingPerson.birthYear) {\n                canPlaceInRow = false;\n                break;\n              }\n            }\n\n            // Если можно разместить в этой строке\n            if (canPlaceInRow) {\n              groupRows[rowIndex].push(person);\n              placed = true;\n              break;\n            }\n          }\n\n          // Если не удалось разместить в существующих строках, создаем новую\n          if (!placed) {\n            groupRows.push([person]);\n          }\n        });\n\n        // Добавляем строки данной группы к общему списку\n        rows.push(...groupRows);\n\n        // Добавляем пустую строку для визуального разделения (кроме последней группы)\n        if (groupValue !== allGroups[allGroups.length - 1]) {\n          rows.push([]);\n        }\n      }\n    });\n    return rows;\n  };\n\n  // Получаем размещение по строкам\n  const rowPlacement = calculateRowPlacement(sortedData);\n\n  // Вычисляем общую высоту с учетом пустых строк\n  const totalHeight = rowPlacement.reduce((height, row) => {\n    return height + (row.length === 0 ? 20 : 70); // 20px для пустых строк, 70px для обычных (60px + 10px margin)\n  }, 0);\n\n  // Функция для создания разделителей категорий\n  // Высота строки и отступ вниз для непустой строки\n  const ROW_HEIGHT = 60;\n  const ROW_MARGIN = 10; // margin-bottom, используется только для непустых строк\n  const EMPTY_ROW_HEIGHT = 20;\n\n  // Подсчитываем абсолютный top каждой строки, чтобы точно позиционировать разделители\n  const rowTops = [];\n  (() => {\n    let acc = 0;\n    rowPlacement.forEach(row => {\n      rowTops.push(acc);\n      if (row.length === 0) {\n        acc += EMPTY_ROW_HEIGHT;\n      } else {\n        acc += ROW_HEIGHT + ROW_MARGIN;\n      }\n    });\n  })();\n  const createCategoryDividers = () => {\n    if (groupingType === 'none') {\n      return []; // Без группировки нет разделителей\n    }\n    const dividers = [];\n    let currentGroup = '';\n    rowPlacement.forEach((row, rowIndex) => {\n      if (row.length > 0) {\n        const firstPersonInRow = row[0];\n        let currentGroupValue;\n        if (groupingType === 'category') {\n          currentGroupValue = firstPersonInRow.category;\n        } else if (groupingType === 'country') {\n          // Для стран берем первую из списка\n          currentGroupValue = getFirstCountry(firstPersonInRow.country);\n        } else {\n          currentGroupValue = firstPersonInRow.category;\n        }\n        if (currentGroupValue !== currentGroup) {\n          if (currentGroup !== '') {\n            // закрываем предыдущую группу\n            dividers.push({\n              category: currentGroup,\n              top: rowTops[rowIndex] - 5\n            });\n          }\n          currentGroup = currentGroupValue;\n        }\n      }\n    });\n\n    // Добавляем разделитель для последней группы\n    if (currentGroup !== '') {\n      dividers.push({\n        category: currentGroup,\n        top: rowTops[rowPlacement.length - 1] - 5\n      });\n    }\n    return dividers;\n  };\n  const categoryDividers = createCategoryDividers();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    id: \"chrononinja-app\",\n    role: \"main\",\n    \"aria-label\": \"Chrono Ninja - \\u0418\\u043D\\u0442\\u0435\\u0440\\u0430\\u043A\\u0442\\u0438\\u0432\\u043D\\u0430\\u044F \\u0432\\u0440\\u0435\\u043C\\u0435\\u043D\\u043D\\u0430\\u044F \\u043B\\u0438\\u043D\\u0438\\u044F \\u0438\\u0441\\u0442\\u043E\\u0440\\u0438\\u0447\\u0435\\u0441\\u043A\\u0438\\u0445 \\u043B\\u0438\\u0447\\u043D\\u043E\\u0441\\u0442\\u0435\\u0439\",\n    children: [/*#__PURE__*/_jsxDEV(AppHeader, {\n      isScrolled: isScrolled,\n      showControls: showControls,\n      setShowControls: setShowControls,\n      filters: filters,\n      setFilters: setFilters,\n      groupingType: groupingType,\n      setGroupingType: setGroupingType,\n      allCategories: allCategories,\n      allCountries: allCountries,\n      yearInputs: yearInputs,\n      setYearInputs: setYearInputs,\n      applyYearFilter: applyYearFilter,\n      handleYearKeyPress: handleYearKeyPress,\n      resetAllFilters: resetAllFilters,\n      getCategoryColor: getGroupColor,\n      sortedData: sortedData,\n      handleSliderMouseDown: handleSliderMouseDown,\n      isDraggingSlider: isDraggingSlider\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeline-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"timeline-container\",\n        id: \"timeline-viewport\",\n        role: \"region\",\n        \"aria-label\": \"\\u041E\\u0431\\u043B\\u0430\\u0441\\u0442\\u044C \\u043F\\u0440\\u043E\\u0441\\u043C\\u043E\\u0442\\u0440\\u0430 \\u0432\\u0440\\u0435\\u043C\\u0435\\u043D\\u043D\\u043E\\u0439 \\u043B\\u0438\\u043D\\u0438\\u0438\",\n        children: /*#__PURE__*/_jsxDEV(Timeline, {\n          isLoading: isLoading,\n          timelineWidth: timelineWidth,\n          totalHeight: totalHeight,\n          centuryBoundaries: centuryBoundaries,\n          minYear: minYear,\n          pixelsPerYear: pixelsPerYear,\n          LEFT_PADDING_PX: LEFT_PADDING_PX,\n          rowPlacement: rowPlacement,\n          filters: filters,\n          groupingType: groupingType,\n          categoryDividers: categoryDividers,\n          getGroupColor: getGroupColor,\n          getGroupColorDark: getGroupColorDark,\n          getGroupColorMuted: getGroupColorMuted,\n          getPersonGroup: person => getPersonGroup(person, groupingType),\n          hoveredPerson: hoveredPerson,\n          setHoveredPerson: person => {\n            if (person) {\n              // Используем текущую позицию мыши из состояния\n              handlePersonHover(person, mousePosition.x, mousePosition.y);\n            } else {\n              handlePersonHover(null, 0, 0);\n            }\n          },\n          mousePosition: mousePosition,\n          setMousePosition: position => {\n            // Обновляем позицию мыши\n            if (hoveredPerson) {\n              handlePersonHover(hoveredPerson, position.x, position.y);\n            }\n          },\n          showTooltip: showTooltip,\n          setShowTooltip: show => {\n            if (!show && hoveredPerson) {\n              handlePersonHover(null, 0, 0);\n            }\n          },\n          activeAchievementMarker: activeAchievementMarker,\n          setActiveAchievementMarker: setActiveAchievementMarker,\n          hoveredAchievement: hoveredAchievement,\n          setHoveredAchievement: achievement => {\n            if (achievement) {\n              // Используем текущую позицию мыши из состояния\n              handleAchievementHover(achievement, achievementTooltipPosition.x, achievementTooltipPosition.y);\n            } else {\n              handleAchievementHover(null, 0, 0);\n            }\n          },\n          achievementTooltipPosition: achievementTooltipPosition,\n          setAchievementTooltipPosition: position => {\n            if (hoveredAchievement) {\n              handleAchievementHover(hoveredAchievement, position.x, position.y);\n            }\n          },\n          showAchievementTooltip: showAchievementTooltip,\n          setShowAchievementTooltip: show => {\n            if (!show && hoveredAchievement) {\n              handleAchievementHover(null, 0, 0);\n            }\n          },\n          handlePersonHover: handlePersonHover,\n          hoverTimerRef: hoverTimerRef,\n          sortedData: sortedData,\n          selectedPerson: selectedPerson,\n          setSelectedPerson: setSelectedPerson\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"tooltips-container\",\n      id: \"tooltips-aside\",\n      \"aria-label\": \"\\u0418\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u043E\\u043D\\u043D\\u044B\\u0435 \\u043F\\u043E\\u0434\\u0441\\u043A\\u0430\\u0437\\u043A\\u0438\",\n      children: /*#__PURE__*/_jsxDEV(Tooltips, {\n        hoveredPerson: hoveredPerson,\n        showTooltip: showTooltip,\n        mousePosition: mousePosition,\n        hoveredAchievement: hoveredAchievement,\n        showAchievementTooltip: showAchievementTooltip,\n        achievementTooltipPosition: achievementTooltipPosition,\n        getGroupColor: getGroupColor,\n        getPersonGroup: person => getPersonGroup(person, groupingType),\n        getCategoryColor: getGroupColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MobilePersonPanel, {\n      selectedPerson: selectedPerson,\n      onClose: () => setSelectedPerson(null),\n      getGroupColor: getGroupColor,\n      getPersonGroup: person => getPersonGroup(person, groupingType),\n      getCategoryColor: getGroupColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 394,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"a9/vqt11UCD5S93LKezwbmZRefw=\", false, function () {\n  return [useFilters, useTimelineData, useSlider, useTooltip];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","AppHeader","Timeline","Tooltips","MobilePersonPanel","useTimelineData","useFilters","useSlider","useTooltip","generateCenturyBoundaries","getFirstCountry","getGroupColor","getGroupColorDark","getGroupColorMuted","getPersonGroup","sortGroupedData","jsxDEV","_jsxDEV","App","_s","isScrolled","setIsScrolled","activeAchievementMarker","setActiveAchievementMarker","selectedPerson","setSelectedPerson","showControls","setShowControls","filters","setFilters","groupingType","setGroupingType","yearInputs","setYearInputs","applyYearFilter","handleYearKeyPress","resetAllFilters","persons","allCategories","allCountries","isLoading","isDraggingSlider","handleSliderMouseDown","handleSliderMouseMove","handleSliderMouseUp","hoveredPerson","mousePosition","showTooltip","hoveredAchievement","achievementTooltipPosition","showAchievementTooltip","hoverTimerRef","handlePersonHover","handleAchievementHover","handleMouseMove","e","handleMouseUp","document","addEventListener","removeEventListener","sortedData","hideEmptyCenturies","length","effectiveMinYear","Math","min","map","p","birthYear","effectiveMaxYear","max","deathYear","hasActiveFilters","categories","countries","newTimeRange","timeRange","start","end","prev","toString","handleScroll","scrollTop","window","pageYOffset","documentElement","handleCloseAchievementTooltip","handleClickOutside","event","target","tooltip","getElementById","isClickInsideTooltip","contains","isClickOnMarker","closest","type","setTimeout","minYear","maxYear","totalYears","pixelsPerYear","LEFT_PADDING_PX","timelineWidth","centuryBoundaries","calculateRowPlacement","people","rows","allRows","forEach","person","placed","rowIndex","row","canPlaceInRow","existingPerson","BUFFER","push","groupField","allGroups","groups","groupValue","country","groupPeople","groupRows","rowPlacement","totalHeight","reduce","height","ROW_HEIGHT","ROW_MARGIN","EMPTY_ROW_HEIGHT","rowTops","acc","createCategoryDividers","dividers","currentGroup","firstPersonInRow","currentGroupValue","category","top","categoryDividers","className","id","role","children","getCategoryColor","fileName","_jsxFileName","lineNumber","columnNumber","setHoveredPerson","x","y","setMousePosition","position","setShowTooltip","show","setHoveredAchievement","achievement","setAchievementTooltipPosition","setShowAchievementTooltip","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Selecty/Documents/PetProjects/chronoline-frontend/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Person } from './types'\nimport { AppHeader } from './components/AppHeader'\nimport { Timeline } from './components/Timeline'\nimport { Tooltips } from './components/Tooltips'\nimport { MobilePersonPanel } from './components/MobilePersonPanel'\nimport { useTimelineData } from './hooks/useTimelineData'\nimport { useFilters } from './hooks/useFilters'\nimport { useSlider } from './hooks/useSlider'\nimport { useTooltip } from './hooks/useTooltip'\nimport { \n  generateCenturyBoundaries,\n  getFirstCountry\n} from './utils/timelineUtils'\nimport { \n  getGroupColor, \n  getGroupColorDark, \n  getGroupColorMuted, \n  getPersonGroup,\n  sortGroupedData\n} from './utils/groupingUtils'\nimport './App.css'\n\nfunction App() {\n  const [isScrolled, setIsScrolled] = useState(false)\n  const [activeAchievementMarker, setActiveAchievementMarker] = useState<{ personId: string; index: number } | null>(null)\n  const [selectedPerson, setSelectedPerson] = useState<Person | null>(null)\n  const [showControls, setShowControls] = useState(true)\n\n  // Используем кастомные хуки\n  const { \n    filters, \n    setFilters, \n    groupingType, \n    setGroupingType, \n    yearInputs, \n    setYearInputs, \n    applyYearFilter, \n    handleYearKeyPress, \n    resetAllFilters \n  } = useFilters()\n  \n  const { persons, allCategories, allCountries, isLoading } = useTimelineData(filters)\n\n  const { \n    isDraggingSlider, \n    handleSliderMouseDown, \n    handleSliderMouseMove, \n    handleSliderMouseUp \n  } = useSlider()\n  \n  const { \n    hoveredPerson, \n    mousePosition, \n    showTooltip, \n    hoveredAchievement, \n    achievementTooltipPosition, \n    showAchievementTooltip, \n    hoverTimerRef, \n    handlePersonHover, \n    handleAchievementHover \n  } = useTooltip()\n\n\n\n\n\n  // Добавляем обработчики событий мыши и touch\n  useEffect(() => {\n    if (isDraggingSlider) {\n      const handleMouseMove = (e: MouseEvent | TouchEvent) => \n        handleSliderMouseMove(e, yearInputs, applyYearFilter, setYearInputs)\n      \n      const handleMouseUp = () => handleSliderMouseUp()\n      \n      document.addEventListener('mousemove', handleMouseMove)\n      document.addEventListener('mouseup', handleMouseUp)\n      document.addEventListener('touchmove', handleMouseMove)\n      document.addEventListener('touchend', handleMouseUp)\n      \n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove)\n        document.removeEventListener('mouseup', handleMouseUp)\n        document.removeEventListener('touchmove', handleMouseMove)\n        document.removeEventListener('touchend', handleMouseUp)\n      }\n    }\n  }, [isDraggingSlider, handleSliderMouseMove, handleSliderMouseUp, yearInputs, applyYearFilter, setYearInputs, setFilters])\n\n\n\n  // Функция фильтрации данных (теперь данные фильтруются на бэкенде, но сортировка остается)\n  const sortedData = sortGroupedData(persons, groupingType)\n\n  // Автоматически обновляем диапазон дат при изменении настройки скрытия пустых веков\n  useEffect(() => {\n    if (filters.hideEmptyCenturies && sortedData.length > 0) {\n      // Вычисляем эффективный диапазон на основе отфильтрованных данных\n      const effectiveMinYear = Math.min(...sortedData.map(p => p.birthYear));\n      const effectiveMaxYear = Math.max(...sortedData.map(p => p.deathYear));\n      \n      // Проверяем, есть ли активные фильтры (категории или страны)\n      const hasActiveFilters = filters.categories.length > 0 || filters.countries.length > 0;\n      \n      let newTimeRange = { ...filters.timeRange };\n      \n      if (hasActiveFilters) {\n        // Если есть активные фильтры, сужаем диапазон до отфильтрованных данных\n        newTimeRange = {\n          start: Math.max(filters.timeRange.start, effectiveMinYear),\n          end: Math.min(filters.timeRange.end, effectiveMaxYear)\n        };\n      } else {\n        // Если нет активных фильтров, НЕ сужаем диапазон\n        // Пользователь может хотеть видеть данные за пределами текущего диапазона\n        newTimeRange = filters.timeRange;\n      }\n      \n      // Обновляем только если диапазон изменился\n      if (newTimeRange.start !== filters.timeRange.start || newTimeRange.end !== filters.timeRange.end) {\n        setFilters(prev => ({\n          ...prev,\n          timeRange: newTimeRange\n        }));\n        \n        // Обновляем поля ввода\n        setYearInputs({\n          start: newTimeRange.start.toString(),\n          end: newTimeRange.end.toString()\n        });\n      }\n    }\n  }, [filters.hideEmptyCenturies, sortedData, filters.categories, filters.countries, filters.timeRange]);\n\n  // Отслеживаем скролл\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollTop = window.pageYOffset || document.documentElement.scrollTop\n      setIsScrolled(scrollTop > 50)\n    }\n\n    window.addEventListener('scroll', handleScroll)\n    return () => window.removeEventListener('scroll', handleScroll)\n  }, [])\n\n  // Обработчик для закрытия achievement tooltip на мобильных\n  useEffect(() => {\n    const handleCloseAchievementTooltip = () => {\n      handleAchievementHover(null, 0, 0);\n    };\n\n    const handleClickOutside = (event: Event) => {\n      // Проверяем, что клик был вне tooltip'а и вне маркеров достижений\n      const target = event.target as Element;\n      const tooltip = document.getElementById('achievement-tooltip');\n      const isClickInsideTooltip = tooltip?.contains(target);\n      const isClickOnMarker = target.closest('.achievement-marker');\n      \n      // Добавляем небольшую задержку для touch событий, чтобы избежать случайного закрытия\n      if (!isClickInsideTooltip && !isClickOnMarker && showAchievementTooltip) {\n        if (event.type === 'touchstart') {\n          setTimeout(() => {\n            handleAchievementHover(null, 0, 0);\n          }, 100);\n        } else {\n          handleAchievementHover(null, 0, 0);\n        }\n      }\n    };\n\n    window.addEventListener('closeAchievementTooltip', handleCloseAchievementTooltip);\n    document.addEventListener('mousedown', handleClickOutside);\n    document.addEventListener('touchstart', handleClickOutside);\n    \n    return () => {\n      window.removeEventListener('closeAchievementTooltip', handleCloseAchievementTooltip);\n      document.removeEventListener('mousedown', handleClickOutside);\n      document.removeEventListener('touchstart', handleClickOutside);\n    };\n  }, [handleAchievementHover, showAchievementTooltip]);\n\n  // Вычисляем реальный диапазон лет из отфильтрованных данных\n  const minYear = Math.min(...sortedData.map(p => p.birthYear), filters.timeRange.start)\n  const maxYear = Math.max(...sortedData.map(p => p.deathYear), filters.timeRange.end)\n  const totalYears = maxYear - minYear\n\n  // Настройки масштаба\n  const pixelsPerYear = 3 // 3 пикселя на год\n  const LEFT_PADDING_PX = 30 // отступ слева, чтобы крайняя левая подпись не упиралась в край\n  const timelineWidth = totalYears * pixelsPerYear + LEFT_PADDING_PX\n\n  // Генерируем границы веков\n  // Если включена настройка скрытия пустых веков, используем только отфильтрованные данные\n  const effectiveMinYear = filters.hideEmptyCenturies \n    ? Math.min(...sortedData.map(p => p.birthYear))\n    : minYear\n  const effectiveMaxYear = filters.hideEmptyCenturies \n    ? Math.max(...sortedData.map(p => p.deathYear))\n    : maxYear\n  \n  const centuryBoundaries = generateCenturyBoundaries(effectiveMinYear, effectiveMaxYear)\n\n  // Алгоритм размещения полосок на строках с полной группировкой по категориям\n  const calculateRowPlacement = (people: Person[]) => {\n    const rows: Person[][] = []\n    \n    if (groupingType === 'none') {\n      // Без группировки - просто размещаем всех в строки\n      const allRows: Person[][] = []\n      \n      people.forEach(person => {\n        let placed = false\n        \n        // Проверяем каждую существующую строку\n        for (let rowIndex = 0; rowIndex < allRows.length; rowIndex++) {\n          const row = allRows[rowIndex]\n          let canPlaceInRow = true\n          \n          // Проверяем, не пересекается ли с кем-то в этой строке\n          for (const existingPerson of row) {\n            const BUFFER = 20; // минимальный зазор между персонами\n            if (\n              person.birthYear - BUFFER <= existingPerson.deathYear &&\n              person.deathYear + BUFFER >= existingPerson.birthYear\n            ) {\n              canPlaceInRow = false\n              break\n            }\n          }\n          \n          // Если можно разместить в этой строке\n          if (canPlaceInRow) {\n            allRows[rowIndex].push(person)\n            placed = true\n            break\n          }\n        }\n        \n        // Если не удалось разместить в существующих строках, создаем новую\n        if (!placed) {\n          allRows.push([person])\n        }\n      })\n      \n      return allRows\n    }\n    \n    // Группировка по категориям или странам\n    const groupField = groupingType === 'category' ? 'category' : 'country'\n    const allGroups = groupingType === 'category' ? allCategories : allCountries\n    const groups: { [key: string]: Person[] } = {}\n    \n    // Группируем людей по выбранному полю\n    people.forEach(person => {\n      let groupValue: string\n      if (groupField === 'country') {\n        // Для стран берем первую из списка, если есть несколько через \"/\"\n        groupValue = getFirstCountry(person.country)\n      } else {\n        groupValue = person[groupField]\n      }\n      \n      if (!groups[groupValue]) {\n        groups[groupValue] = []\n      }\n      groups[groupValue].push(person)\n    })\n    \n    // Обрабатываем каждую группу в заданном порядке\n    allGroups.forEach(groupValue => {\n      if (groups[groupValue]) {\n        const groupPeople = groups[groupValue]\n        const groupRows: Person[][] = []\n        \n        // Размещаем людей данной группы в отдельные строки\n        groupPeople.forEach(person => {\n          let placed = false\n          \n          // Проверяем каждую существующую строку для этой группы\n          for (let rowIndex = 0; rowIndex < groupRows.length; rowIndex++) {\n            const row = groupRows[rowIndex]\n            let canPlaceInRow = true\n            \n            // Проверяем, не пересекается ли с кем-то в этой строке\n            for (const existingPerson of row) {\n              const BUFFER = 20; // минимальный зазор между персонами\n              if (\n                person.birthYear - BUFFER <= existingPerson.deathYear &&\n                person.deathYear + BUFFER >= existingPerson.birthYear\n              ) {\n                canPlaceInRow = false\n                break\n              }\n            }\n            \n            // Если можно разместить в этой строке\n            if (canPlaceInRow) {\n              groupRows[rowIndex].push(person)\n              placed = true\n              break\n            }\n          }\n          \n          // Если не удалось разместить в существующих строках, создаем новую\n          if (!placed) {\n            groupRows.push([person])\n          }\n        })\n        \n        // Добавляем строки данной группы к общему списку\n        rows.push(...groupRows)\n        \n        // Добавляем пустую строку для визуального разделения (кроме последней группы)\n        if (groupValue !== allGroups[allGroups.length - 1]) {\n          rows.push([])\n        }\n      }\n    })\n    \n    return rows\n  }\n\n  // Получаем размещение по строкам\n  const rowPlacement = calculateRowPlacement(sortedData)\n\n  // Вычисляем общую высоту с учетом пустых строк\n  const totalHeight = rowPlacement.reduce((height, row) => {\n    return height + (row.length === 0 ? 20 : 70) // 20px для пустых строк, 70px для обычных (60px + 10px margin)\n  }, 0)\n\n  // Функция для создания разделителей категорий\n    // Высота строки и отступ вниз для непустой строки\n  const ROW_HEIGHT = 60;\n  const ROW_MARGIN = 10; // margin-bottom, используется только для непустых строк\n  const EMPTY_ROW_HEIGHT = 20;\n\n  // Подсчитываем абсолютный top каждой строки, чтобы точно позиционировать разделители\n  const rowTops: number[] = [];\n  (() => {\n    let acc = 0;\n    rowPlacement.forEach(row => {\n      rowTops.push(acc);\n      if (row.length === 0) {\n        acc += EMPTY_ROW_HEIGHT;\n      } else {\n        acc += ROW_HEIGHT + ROW_MARGIN;\n      }\n    });\n  })();\n\n  const createCategoryDividers = () => {\n    if (groupingType === 'none') {\n      return []; // Без группировки нет разделителей\n    }\n\n    const dividers: { category: string; top: number }[] = [];\n    let currentGroup = '';\n\n    rowPlacement.forEach((row, rowIndex) => {\n      if (row.length > 0) {\n        const firstPersonInRow = row[0];\n        let currentGroupValue: string;\n        \n        if (groupingType === 'category') {\n          currentGroupValue = firstPersonInRow.category;\n        } else if (groupingType === 'country') {\n          // Для стран берем первую из списка\n          currentGroupValue = getFirstCountry(firstPersonInRow.country);\n        } else {\n          currentGroupValue = firstPersonInRow.category;\n        }\n        \n        if (currentGroupValue !== currentGroup) {\n          if (currentGroup !== '') {\n            // закрываем предыдущую группу\n            dividers.push({ category: currentGroup, top: rowTops[rowIndex] - 5 });\n          }\n          currentGroup = currentGroupValue;\n        }\n      }\n    });\n\n    // Добавляем разделитель для последней группы\n    if (currentGroup !== '') {\n      dividers.push({ category: currentGroup, top: rowTops[rowPlacement.length - 1] - 5 });\n    }\n\n    return dividers;\n  };\n\n  const categoryDividers = createCategoryDividers();\n\n  return (\n    <div className=\"app\" id=\"chrononinja-app\" role=\"main\" aria-label=\"Chrono Ninja - Интерактивная временная линия исторических личностей\">\n      <AppHeader\n        isScrolled={isScrolled}\n        showControls={showControls}\n        setShowControls={setShowControls}\n        filters={filters}\n        setFilters={setFilters}\n        groupingType={groupingType}\n        setGroupingType={setGroupingType}\n        allCategories={allCategories}\n        allCountries={allCountries}\n        yearInputs={yearInputs}\n        setYearInputs={setYearInputs}\n        applyYearFilter={applyYearFilter}\n        handleYearKeyPress={handleYearKeyPress}\n        resetAllFilters={resetAllFilters}\n        getCategoryColor={getGroupColor}\n        sortedData={sortedData}\n        handleSliderMouseDown={handleSliderMouseDown}\n        isDraggingSlider={isDraggingSlider}\n      />\n      \n      <div className=\"timeline-wrapper\">\n        <main className=\"timeline-container\" id=\"timeline-viewport\" role=\"region\" aria-label=\"Область просмотра временной линии\">\n          <Timeline\n          isLoading={isLoading}\n          timelineWidth={timelineWidth}\n          totalHeight={totalHeight}\n          centuryBoundaries={centuryBoundaries}\n          minYear={minYear}\n          pixelsPerYear={pixelsPerYear}\n          LEFT_PADDING_PX={LEFT_PADDING_PX}\n          rowPlacement={rowPlacement}\n          filters={filters}\n          groupingType={groupingType}\n          categoryDividers={categoryDividers}\n          getGroupColor={getGroupColor}\n          getGroupColorDark={getGroupColorDark}\n          getGroupColorMuted={getGroupColorMuted}\n          getPersonGroup={(person) => getPersonGroup(person, groupingType)}\n          hoveredPerson={hoveredPerson}\n          setHoveredPerson={(person) => {\n            if (person) {\n              // Используем текущую позицию мыши из состояния\n              handlePersonHover(person, mousePosition.x, mousePosition.y);\n            } else {\n              handlePersonHover(null, 0, 0);\n            }\n          }}\n          mousePosition={mousePosition}\n          setMousePosition={(position) => {\n            // Обновляем позицию мыши\n            if (hoveredPerson) {\n              handlePersonHover(hoveredPerson, position.x, position.y);\n            }\n          }}\n          showTooltip={showTooltip}\n          setShowTooltip={(show) => {\n            if (!show && hoveredPerson) {\n              handlePersonHover(null, 0, 0);\n            }\n          }}\n          activeAchievementMarker={activeAchievementMarker}\n          setActiveAchievementMarker={setActiveAchievementMarker}\n          hoveredAchievement={hoveredAchievement}\n          setHoveredAchievement={(achievement) => {\n            if (achievement) {\n              // Используем текущую позицию мыши из состояния\n              handleAchievementHover(achievement, achievementTooltipPosition.x, achievementTooltipPosition.y);\n            } else {\n              handleAchievementHover(null, 0, 0);\n            }\n          }}\n          achievementTooltipPosition={achievementTooltipPosition}\n          setAchievementTooltipPosition={(position) => {\n            if (hoveredAchievement) {\n              handleAchievementHover(hoveredAchievement, position.x, position.y);\n            }\n          }}\n          showAchievementTooltip={showAchievementTooltip}\n                  setShowAchievementTooltip={(show) => {\n          if (!show && hoveredAchievement) {\n            handleAchievementHover(null, 0, 0);\n          }\n        }}\n        handlePersonHover={handlePersonHover}\n          hoverTimerRef={hoverTimerRef}\n          sortedData={sortedData}\n          selectedPerson={selectedPerson}\n          setSelectedPerson={setSelectedPerson}\n        />\n        </main>\n      </div>\n\n      <aside className=\"tooltips-container\" id=\"tooltips-aside\" aria-label=\"Информационные подсказки\">\n        <Tooltips\n          hoveredPerson={hoveredPerson}\n          showTooltip={showTooltip}\n          mousePosition={mousePosition}\n          hoveredAchievement={hoveredAchievement}\n          showAchievementTooltip={showAchievementTooltip}\n          achievementTooltipPosition={achievementTooltipPosition}\n          getGroupColor={getGroupColor}\n          getPersonGroup={(person) => getPersonGroup(person, groupingType)}\n          getCategoryColor={getGroupColor}\n        />\n      </aside>\n      \n      {/* Мобильная панель с информацией о человеке */}\n      <MobilePersonPanel\n        selectedPerson={selectedPerson}\n        onClose={() => setSelectedPerson(null)}\n        getGroupColor={getGroupColor}\n        getPersonGroup={(person) => getPersonGroup(person, groupingType)}\n        getCategoryColor={getGroupColor}\n      />\n    </div>\n  )\n}\n\nexport default App "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}