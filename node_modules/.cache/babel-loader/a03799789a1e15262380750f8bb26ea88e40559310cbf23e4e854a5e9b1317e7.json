{"ast":null,"code":"// API functions for connecting to backend\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'https://chrono-back-kramushka.amvera.io';// Safe decode function\nconst safeDecode=str=>{try{return decodeURIComponent(escape(str));}catch(error){console.warn('Failed to decode string:',str,error);return str;}};// Types for API responses\n// Helper function to build query string from filters\nconst buildQueryString=filters=>{const params=new URLSearchParams();if(filters.category){params.append('category',filters.category);}if(filters.country){params.append('country',filters.country);}if(filters.startYear!==undefined){params.append('startYear',filters.startYear.toString());}if(filters.endYear!==undefined){params.append('endYear',filters.endYear.toString());}return params.toString();};// Get persons with optional filters\nexport const getPersons=async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const queryString=buildQueryString(filters);const url=`${API_BASE_URL}/api/persons${queryString?`?${queryString}`:''}`;console.log('Fetching persons from:',url);const response=await fetch(url);if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const data=await response.json();console.log('Persons data received:',data);// Преобразуем данные в правильный формат с безопасной декодировкой\nconst transformedData=data.map(person=>({id:person.id,name:safeDecode(person.name||''),birthYear:person.birthYear,deathYear:person.deathYear,category:safeDecode(person.category||''),country:safeDecode(person.country||''),description:safeDecode(person.description||''),imageUrl:person.imageUrl,reignStart:person.reignStart,reignEnd:person.reignEnd,achievementYear1:person.achievementYear1,achievementYear2:person.achievementYear2,achievementYear3:person.achievementYear3,achievements:Array.isArray(person.achievements)?person.achievements.map(a=>safeDecode(a||'')):[]}));return transformedData;}catch(error){console.error('Error fetching persons:',error);// Return empty array as fallback\nreturn[];}};// Get all categories\nexport const getCategories=async()=>{try{const url=`${API_BASE_URL}/api/categories`;console.log('Fetching categories from:',url);const response=await fetch(url);if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const data=await response.json();console.log('Categories data received:',data);// Безопасная декодировка категорий\nreturn data.map(category=>safeDecode(category||''));}catch(error){console.error('Error fetching categories:',error);// Return default categories as fallback\nreturn['Политик','Ученый','Художник','Писатель','Военачальник'];}};// Get all countries\nexport const getCountries=async()=>{try{const url=`${API_BASE_URL}/api/countries`;console.log('Fetching countries from:',url);const response=await fetch(url);if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const data=await response.json();console.log('Countries data received:',data);// Безопасная декодировка стран\nreturn data.map(country=>safeDecode(country||''));}catch(error){console.error('Error fetching countries:',error);// Return default countries as fallback\nreturn['Древний Рим','Древняя Греция','Древний Египет','Китай','Индия'];}};// Test connection to backend\nexport const testBackendConnection=async()=>{try{const response=await fetch(`${API_BASE_URL}/api/health`);return response.ok;}catch(error){console.error('Backend connection test failed:',error);return false;}};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","safeDecode","str","decodeURIComponent","escape","error","console","warn","buildQueryString","filters","params","URLSearchParams","category","append","country","startYear","undefined","toString","endYear","getPersons","arguments","length","queryString","url","log","response","fetch","ok","Error","status","data","json","transformedData","map","person","id","name","birthYear","deathYear","description","imageUrl","reignStart","reignEnd","achievementYear1","achievementYear2","achievementYear3","achievements","Array","isArray","a","getCategories","getCountries","testBackendConnection"],"sources":["C:/Users/Selecty/Documents/PetProjects/chronoline-frontend/src/services/api.ts"],"sourcesContent":["// API functions for connecting to backend\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://chrono-back-kramushka.amvera.io';\n\n// Safe decode function\nconst safeDecode = (str: string): string => {\n  try {\n    return decodeURIComponent(escape(str));\n  } catch (error) {\n    console.warn('Failed to decode string:', str, error);\n    return str;\n  }\n};\n\n// Types for API responses\ninterface Person {\n  id: string;\n  name: string;\n  birthYear: number;\n  deathYear: number;\n  category: string;\n  country: string;\n  description: string;\n  imageUrl?: string;\n  reignStart?: number;\n  reignEnd?: number;\n  achievementYear1?: number;\n  achievementYear2?: number;\n  achievementYear3?: number;\n  achievements: string[];\n}\n\ninterface ApiFilters {\n  category?: string;\n  country?: string;\n  startYear?: number;\n  endYear?: number;\n}\n\n// Helper function to build query string from filters\nconst buildQueryString = (filters: ApiFilters): string => {\n  const params = new URLSearchParams();\n  \n  if (filters.category) {\n    params.append('category', filters.category);\n  }\n  if (filters.country) {\n    params.append('country', filters.country);\n  }\n  if (filters.startYear !== undefined) {\n    params.append('startYear', filters.startYear.toString());\n  }\n  if (filters.endYear !== undefined) {\n    params.append('endYear', filters.endYear.toString());\n  }\n  \n  return params.toString();\n};\n\n// Get persons with optional filters\nexport const getPersons = async (filters: ApiFilters = {}): Promise<Person[]> => {\n  try {\n    const queryString = buildQueryString(filters);\n    const url = `${API_BASE_URL}/api/persons${queryString ? `?${queryString}` : ''}`;\n    \n    console.log('Fetching persons from:', url);\n    \n    const response = await fetch(url);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    console.log('Persons data received:', data);\n    \n    // Преобразуем данные в правильный формат с безопасной декодировкой\n    const transformedData = data.map((person: any) => ({\n      id: person.id,\n      name: safeDecode(person.name || ''),\n      birthYear: person.birthYear,\n      deathYear: person.deathYear,\n      category: safeDecode(person.category || ''),\n      country: safeDecode(person.country || ''),\n      description: safeDecode(person.description || ''),\n      imageUrl: person.imageUrl,\n      reignStart: person.reignStart,\n      reignEnd: person.reignEnd,\n      achievementYear1: person.achievementYear1,\n      achievementYear2: person.achievementYear2,\n      achievementYear3: person.achievementYear3,\n      achievements: Array.isArray(person.achievements) ? person.achievements.map((a: any) => safeDecode(a || '')) : []\n    }));\n    \n    return transformedData;\n  } catch (error) {\n    console.error('Error fetching persons:', error);\n    // Return empty array as fallback\n    return [];\n  }\n};\n\n// Get all categories\nexport const getCategories = async (): Promise<string[]> => {\n  try {\n    const url = `${API_BASE_URL}/api/categories`;\n    \n    console.log('Fetching categories from:', url);\n    \n    const response = await fetch(url);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    console.log('Categories data received:', data);\n    \n    // Безопасная декодировка категорий\n    return data.map((category: string) => safeDecode(category || ''));\n  } catch (error) {\n    console.error('Error fetching categories:', error);\n    // Return default categories as fallback\n    return ['Политик', 'Ученый', 'Художник', 'Писатель', 'Военачальник'];\n  }\n};\n\n// Get all countries\nexport const getCountries = async (): Promise<string[]> => {\n  try {\n    const url = `${API_BASE_URL}/api/countries`;\n    \n    console.log('Fetching countries from:', url);\n    \n    const response = await fetch(url);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    console.log('Countries data received:', data);\n    \n    // Безопасная декодировка стран\n    return data.map((country: string) => safeDecode(country || ''));\n  } catch (error) {\n    console.error('Error fetching countries:', error);\n    // Return default countries as fallback\n    return ['Древний Рим', 'Древняя Греция', 'Древний Египет', 'Китай', 'Индия'];\n  }\n};\n\n// Test connection to backend\nexport const testBackendConnection = async (): Promise<boolean> => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/health`);\n    return response.ok;\n  } catch (error) {\n    console.error('Backend connection test failed:', error);\n    return false;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}