{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { getPersons, getCategories, getCountries } from '../services/api';\nexport const useTimelineData = filters => {\n  _s();\n  const [persons, setPersons] = useState([]);\n  const [allCategories, setAllCategories] = useState([]);\n  const [allCountries, setAllCountries] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n\n        // Формируем параметры для запроса\n        const filtersToApply = {};\n        if (filters.categories.length > 0) {\n          filtersToApply.category = filters.categories.join(',');\n        }\n        if (filters.countries.length > 0) {\n          filtersToApply.country = filters.countries.join(',');\n        }\n        filtersToApply.startYear = filters.timeRange.start;\n        filtersToApply.endYear = filters.timeRange.end;\n\n        // Загружаем персон с учетом фильтров\n        const personsData = await getPersons(filtersToApply);\n        setPersons(personsData);\n\n        // Загружаем категории и страны только если они еще не загружены\n        if (allCategories.length === 0 || allCountries.length === 0) {\n          const [categoriesData, countriesData] = await Promise.all([getCategories(), getCountries()]);\n          setAllCategories(categoriesData);\n          setAllCountries(countriesData);\n        }\n      } catch (error) {\n        console.error(\"Ошибка при загрузке данных:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [filters, allCategories.length, allCountries.length]);\n  return {\n    persons,\n    allCategories,\n    allCountries,\n    isLoading\n  };\n};\n_s(useTimelineData, \"g90kxKmU8dkHWHCTliYQHk8twuY=\");","map":{"version":3,"names":["useState","useEffect","getPersons","getCategories","getCountries","useTimelineData","filters","_s","persons","setPersons","allCategories","setAllCategories","allCountries","setAllCountries","isLoading","setIsLoading","fetchData","filtersToApply","categories","length","category","join","countries","country","startYear","timeRange","start","endYear","end","personsData","categoriesData","countriesData","Promise","all","error","console"],"sources":["C:/Users/Selecty/Documents/PetProjects/chronoline-frontend/src/hooks/useTimelineData.ts"],"sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { Person } from '../types'\r\nimport { getPersons, getCategories, getCountries } from '../services/api'\r\n\r\ninterface Filters {\r\n  categories: string[]\r\n  countries: string[]\r\n  timeRange: { start: number; end: number }\r\n  showAchievements: boolean\r\n}\r\n\r\nexport const useTimelineData = (filters: Filters) => {\r\n  const [persons, setPersons] = useState<Person[]>([])\r\n  const [allCategories, setAllCategories] = useState<string[]>([])\r\n  const [allCountries, setAllCountries] = useState<string[]>([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setIsLoading(true)\r\n\r\n        // Формируем параметры для запроса\r\n        const filtersToApply: any = {}\r\n        if (filters.categories.length > 0) {\r\n          filtersToApply.category = filters.categories.join(',')\r\n        }\r\n        if (filters.countries.length > 0) {\r\n          filtersToApply.country = filters.countries.join(',')\r\n        }\r\n        filtersToApply.startYear = filters.timeRange.start\r\n        filtersToApply.endYear = filters.timeRange.end\r\n\r\n        // Загружаем персон с учетом фильтров\r\n        const personsData = await getPersons(filtersToApply)\r\n        setPersons(personsData)\r\n\r\n        // Загружаем категории и страны только если они еще не загружены\r\n        if (allCategories.length === 0 || allCountries.length === 0) {\r\n          const [categoriesData, countriesData] = await Promise.all([\r\n            getCategories(),\r\n            getCountries()\r\n          ])\r\n          setAllCategories(categoriesData)\r\n          setAllCountries(countriesData)\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Ошибка при загрузке данных:\", error)\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [filters, allCategories.length, allCountries.length])\r\n\r\n  return { persons, allCategories, allCountries, isLoading }\r\n} "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,UAAU,EAAEC,aAAa,EAAEC,YAAY,QAAQ,iBAAiB;AASzE,OAAO,MAAMC,eAAe,GAAIC,OAAgB,IAAK;EAAAC,EAAA;EACnD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAW,EAAE,CAAC;EACpD,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAW,EAAE,CAAC;EAChE,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAW,EAAE,CAAC;EAC9D,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFD,YAAY,CAAC,IAAI,CAAC;;QAElB;QACA,MAAME,cAAmB,GAAG,CAAC,CAAC;QAC9B,IAAIX,OAAO,CAACY,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;UACjCF,cAAc,CAACG,QAAQ,GAAGd,OAAO,CAACY,UAAU,CAACG,IAAI,CAAC,GAAG,CAAC;QACxD;QACA,IAAIf,OAAO,CAACgB,SAAS,CAACH,MAAM,GAAG,CAAC,EAAE;UAChCF,cAAc,CAACM,OAAO,GAAGjB,OAAO,CAACgB,SAAS,CAACD,IAAI,CAAC,GAAG,CAAC;QACtD;QACAJ,cAAc,CAACO,SAAS,GAAGlB,OAAO,CAACmB,SAAS,CAACC,KAAK;QAClDT,cAAc,CAACU,OAAO,GAAGrB,OAAO,CAACmB,SAAS,CAACG,GAAG;;QAE9C;QACA,MAAMC,WAAW,GAAG,MAAM3B,UAAU,CAACe,cAAc,CAAC;QACpDR,UAAU,CAACoB,WAAW,CAAC;;QAEvB;QACA,IAAInB,aAAa,CAACS,MAAM,KAAK,CAAC,IAAIP,YAAY,CAACO,MAAM,KAAK,CAAC,EAAE;UAC3D,MAAM,CAACW,cAAc,EAAEC,aAAa,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACxD9B,aAAa,CAAC,CAAC,EACfC,YAAY,CAAC,CAAC,CACf,CAAC;UACFO,gBAAgB,CAACmB,cAAc,CAAC;UAChCjB,eAAe,CAACkB,aAAa,CAAC;QAChC;MACF,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD,CAAC,SAAS;QACRnB,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACV,OAAO,EAAEI,aAAa,CAACS,MAAM,EAAEP,YAAY,CAACO,MAAM,CAAC,CAAC;EAExD,OAAO;IAAEX,OAAO;IAAEE,aAAa;IAAEE,YAAY;IAAEE;EAAU,CAAC;AAC5D,CAAC;AAAAP,EAAA,CA9CYF,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}