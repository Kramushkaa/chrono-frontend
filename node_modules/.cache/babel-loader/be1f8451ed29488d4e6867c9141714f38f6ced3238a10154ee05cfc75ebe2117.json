{"ast":null,"code":"import{getCategoryColor,getCategoryColorDark,getCategoryColorMuted}from'./categoryColors';export const getCategoryPriority=category=>{const priorities={'Правители':1,'Военачальники':2,'Ученые':3,'Художники':4,'Писатели':5,'Философы':6,'Исследователи':7,'Религиозные деятели':8,'Музыканты':9,'Архитекторы':10};return priorities[category]||999;};export const getGroupColor=groupName=>{if(groupName.includes('Правители'))return'#d32f2f';if(groupName.includes('Военачальники'))return'#f57c00';if(groupName.includes('Ученые'))return'#1976d2';if(groupName.includes('Художники'))return'#388e3c';if(groupName.includes('Писатели'))return'#7b1fa2';if(groupName.includes('Философы'))return'#5d4037';if(groupName.includes('Исследователи'))return'#00838f';if(groupName.includes('Религиозные деятели'))return'#c2185b';if(groupName.includes('Музыканты'))return'#ff8f00';if(groupName.includes('Архитекторы'))return'#4e342e';// Для стран используем цвета категорий\nreturn getCategoryColor(groupName);};export const getGroupColorDark=groupName=>{if(groupName.includes('Правители'))return'#b71c1c';if(groupName.includes('Военачальники'))return'#e65100';if(groupName.includes('Ученые'))return'#0d47a1';if(groupName.includes('Художники'))return'#1b5e20';if(groupName.includes('Писатели'))return'#4a148c';if(groupName.includes('Философы'))return'#3e2723';if(groupName.includes('Исследователи'))return'#006064';if(groupName.includes('Религиозные деятели'))return'#880e4f';if(groupName.includes('Музыканты'))return'#e65100';if(groupName.includes('Архитекторы'))return'#3e2723';// Для стран используем цвета категорий\nreturn getCategoryColorDark(groupName);};export const getGroupColorMuted=groupName=>{if(groupName.includes('Правители'))return'#ffcdd2';if(groupName.includes('Военачальники'))return'#ffe0b2';if(groupName.includes('Ученые'))return'#bbdefb';if(groupName.includes('Художники'))return'#c8e6c9';if(groupName.includes('Писатели'))return'#e1bee7';if(groupName.includes('Философы'))return'#d7ccc8';if(groupName.includes('Исследователи'))return'#b2ebf2';if(groupName.includes('Религиозные деятели'))return'#f8bbd9';if(groupName.includes('Музыканты'))return'#ffe0b2';if(groupName.includes('Архитекторы'))return'#d7ccc8';// Для стран используем цвета категорий\nreturn getCategoryColorMuted(groupName);};export const getPersonGroup=(person,groupingType)=>{if(groupingType==='none')return'none';if(groupingType==='category'){return person.category||'Неизвестно';}if(groupingType==='country'){return person.country||'Неизвестно';}return'none';};export const sortGroupedData=(data,groupingType)=>{if(groupingType==='none'){return data.sort((a,b)=>a.birthYear-b.birthYear);}// Группируем данные\nconst grouped=data.reduce((acc,person)=>{const group=getPersonGroup(person,groupingType);if(!acc[group]){acc[group]=[];}acc[group].push(person);return acc;},{});// Сортируем группы\nconst sortedGroups=Object.keys(grouped).sort((a,b)=>{if(groupingType==='category'){return getCategoryPriority(a)-getCategoryPriority(b);}return a.localeCompare(b);});// Сортируем людей внутри групп по году рождения\nsortedGroups.forEach(group=>{grouped[group].sort((a,b)=>a.birthYear-b.birthYear);});// Возвращаем плоский массив\nreturn sortedGroups.flatMap(group=>grouped[group]);};","map":{"version":3,"names":["getCategoryColor","getCategoryColorDark","getCategoryColorMuted","getCategoryPriority","category","priorities","getGroupColor","groupName","includes","getGroupColorDark","getGroupColorMuted","getPersonGroup","person","groupingType","country","sortGroupedData","data","sort","a","b","birthYear","grouped","reduce","acc","group","push","sortedGroups","Object","keys","localeCompare","forEach","flatMap"],"sources":["C:/Users/Selecty/Documents/PetProjects/chronoline-frontend/src/utils/groupingUtils.ts"],"sourcesContent":["import { Person } from '../types'\r\nimport { getCategoryColor, getCategoryColorDark, getCategoryColorMuted } from './categoryColors'\r\n\r\nexport const getCategoryPriority = (category: string) => {\r\n  const priorities: { [key: string]: number } = {\r\n    'Правители': 1,\r\n    'Военачальники': 2,\r\n    'Ученые': 3,\r\n    'Художники': 4,\r\n    'Писатели': 5,\r\n    'Философы': 6,\r\n    'Исследователи': 7,\r\n    'Религиозные деятели': 8,\r\n    'Музыканты': 9,\r\n    'Архитекторы': 10\r\n  }\r\n  return priorities[category] || 999\r\n}\r\n\r\nexport const getGroupColor = (groupName: string) => {\r\n  if (groupName.includes('Правители')) return '#d32f2f'\r\n  if (groupName.includes('Военачальники')) return '#f57c00'\r\n  if (groupName.includes('Ученые')) return '#1976d2'\r\n  if (groupName.includes('Художники')) return '#388e3c'\r\n  if (groupName.includes('Писатели')) return '#7b1fa2'\r\n  if (groupName.includes('Философы')) return '#5d4037'\r\n  if (groupName.includes('Исследователи')) return '#00838f'\r\n  if (groupName.includes('Религиозные деятели')) return '#c2185b'\r\n  if (groupName.includes('Музыканты')) return '#ff8f00'\r\n  if (groupName.includes('Архитекторы')) return '#4e342e'\r\n  \r\n  // Для стран используем цвета категорий\r\n  return getCategoryColor(groupName)\r\n}\r\n\r\nexport const getGroupColorDark = (groupName: string) => {\r\n  if (groupName.includes('Правители')) return '#b71c1c'\r\n  if (groupName.includes('Военачальники')) return '#e65100'\r\n  if (groupName.includes('Ученые')) return '#0d47a1'\r\n  if (groupName.includes('Художники')) return '#1b5e20'\r\n  if (groupName.includes('Писатели')) return '#4a148c'\r\n  if (groupName.includes('Философы')) return '#3e2723'\r\n  if (groupName.includes('Исследователи')) return '#006064'\r\n  if (groupName.includes('Религиозные деятели')) return '#880e4f'\r\n  if (groupName.includes('Музыканты')) return '#e65100'\r\n  if (groupName.includes('Архитекторы')) return '#3e2723'\r\n  \r\n  // Для стран используем цвета категорий\r\n  return getCategoryColorDark(groupName)\r\n}\r\n\r\nexport const getGroupColorMuted = (groupName: string) => {\r\n  if (groupName.includes('Правители')) return '#ffcdd2'\r\n  if (groupName.includes('Военачальники')) return '#ffe0b2'\r\n  if (groupName.includes('Ученые')) return '#bbdefb'\r\n  if (groupName.includes('Художники')) return '#c8e6c9'\r\n  if (groupName.includes('Писатели')) return '#e1bee7'\r\n  if (groupName.includes('Философы')) return '#d7ccc8'\r\n  if (groupName.includes('Исследователи')) return '#b2ebf2'\r\n  if (groupName.includes('Религиозные деятели')) return '#f8bbd9'\r\n  if (groupName.includes('Музыканты')) return '#ffe0b2'\r\n  if (groupName.includes('Архитекторы')) return '#d7ccc8'\r\n  \r\n  // Для стран используем цвета категорий\r\n  return getCategoryColorMuted(groupName)\r\n}\r\n\r\nexport const getPersonGroup = (person: Person, groupingType: 'category' | 'country' | 'none') => {\r\n  if (groupingType === 'none') return 'none'\r\n  \r\n  if (groupingType === 'category') {\r\n    return person.category || 'Неизвестно'\r\n  }\r\n  \r\n  if (groupingType === 'country') {\r\n    return person.country || 'Неизвестно'\r\n  }\r\n  \r\n  return 'none'\r\n}\r\n\r\nexport const sortGroupedData = (data: Person[], groupingType: 'category' | 'country' | 'none') => {\r\n  if (groupingType === 'none') {\r\n    return data.sort((a, b) => a.birthYear - b.birthYear)\r\n  }\r\n\r\n  // Группируем данные\r\n  const grouped = data.reduce((acc, person) => {\r\n    const group = getPersonGroup(person, groupingType)\r\n    if (!acc[group]) {\r\n      acc[group] = []\r\n    }\r\n    acc[group].push(person)\r\n    return acc\r\n  }, {} as { [key: string]: Person[] })\r\n\r\n  // Сортируем группы\r\n  const sortedGroups = Object.keys(grouped).sort((a, b) => {\r\n    if (groupingType === 'category') {\r\n      return getCategoryPriority(a) - getCategoryPriority(b)\r\n    }\r\n    return a.localeCompare(b)\r\n  })\r\n\r\n  // Сортируем людей внутри групп по году рождения\r\n  sortedGroups.forEach(group => {\r\n    grouped[group].sort((a, b) => a.birthYear - b.birthYear)\r\n  })\r\n\r\n  // Возвращаем плоский массив\r\n  return sortedGroups.flatMap(group => grouped[group])\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}