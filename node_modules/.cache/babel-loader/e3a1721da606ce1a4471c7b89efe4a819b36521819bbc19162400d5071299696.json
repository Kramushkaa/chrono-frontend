{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nexport const useFilters = () => {\n  _s();\n  const [filters, setFilters] = useState(() => {\n    const savedFilters = localStorage.getItem('chrononinja-filters');\n    if (savedFilters) {\n      const parsed = JSON.parse(savedFilters);\n      return {\n        categories: parsed.categories || [],\n        countries: parsed.countries || [],\n        timeRange: parsed.timeRange || {\n          start: -800,\n          end: 2000\n        },\n        showAchievements: parsed.showAchievements !== undefined ? parsed.showAchievements : true,\n        hideEmptyCenturies: parsed.hideEmptyCenturies !== undefined ? parsed.hideEmptyCenturies : false\n      };\n    }\n    return {\n      categories: [],\n      countries: [],\n      timeRange: {\n        start: -800,\n        end: 2000\n      },\n      showAchievements: true,\n      hideEmptyCenturies: false\n    };\n  });\n  const [groupingType, setGroupingType] = useState(() => {\n    const savedGrouping = localStorage.getItem('chrononinja-grouping');\n    return savedGrouping || 'category';\n  });\n  const [yearInputs, setYearInputs] = useState({\n    start: filters.timeRange.start.toString(),\n    end: filters.timeRange.end.toString()\n  });\n\n  // Сохраняем фильтры в localStorage при изменении\n  useEffect(() => {\n    localStorage.setItem('chrononinja-filters', JSON.stringify(filters));\n  }, [filters]);\n\n  // Сохраняем тип группировки в localStorage при изменении\n  useEffect(() => {\n    localStorage.setItem('chrononinja-grouping', groupingType);\n  }, [groupingType]);\n\n  // Функция для применения фильтра по году\n  const applyYearFilter = useCallback((field, value) => {\n    const parsed = parseInt(value);\n    const numValue = isNaN(parsed) ? field === 'start' ? -800 : 2000 : parsed;\n    setFilters(prev => ({\n      ...prev,\n      timeRange: {\n        ...prev.timeRange,\n        [field]: numValue\n      }\n    }));\n  }, []);\n\n  // Функция для обработки нажатия Enter\n  const handleYearKeyPress = useCallback((field, e) => {\n    if (e.key === 'Enter') {\n      var _e$currentTarget$pare, _e$currentTarget$pare2;\n      applyYearFilter(field, e.currentTarget.value);\n      // Переводим фокус на следующий элемент\n      const inputs = (_e$currentTarget$pare = e.currentTarget.parentElement) === null || _e$currentTarget$pare === void 0 ? void 0 : (_e$currentTarget$pare2 = _e$currentTarget$pare.parentElement) === null || _e$currentTarget$pare2 === void 0 ? void 0 : _e$currentTarget$pare2.querySelectorAll('input');\n      if (inputs) {\n        const currentIndex = Array.from(inputs).indexOf(e.currentTarget);\n        const nextInput = inputs[currentIndex + 1];\n        if (nextInput) {\n          nextInput.focus();\n        }\n      }\n    }\n  }, [applyYearFilter]);\n  const resetAllFilters = useCallback(() => {\n    setFilters({\n      categories: [],\n      countries: [],\n      timeRange: {\n        start: -800,\n        end: 2000\n      },\n      showAchievements: true,\n      hideEmptyCenturies: false\n    });\n    setYearInputs({\n      start: '-800',\n      end: '2000'\n    });\n  }, []);\n  const parseYearValue = useCallback((value, defaultValue) => {\n    const parsed = parseInt(value);\n    return isNaN(parsed) ? defaultValue : parsed;\n  }, []);\n  return {\n    filters,\n    setFilters,\n    groupingType,\n    setGroupingType,\n    yearInputs,\n    setYearInputs,\n    applyYearFilter,\n    handleYearKeyPress,\n    resetAllFilters,\n    parseYearValue\n  };\n};\n_s(useFilters, \"+kbvzdGJeOsxn8DX7BZkXWbEfCo=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useFilters","_s","filters","setFilters","savedFilters","localStorage","getItem","parsed","JSON","parse","categories","countries","timeRange","start","end","showAchievements","undefined","hideEmptyCenturies","groupingType","setGroupingType","savedGrouping","yearInputs","setYearInputs","toString","setItem","stringify","applyYearFilter","field","value","parseInt","numValue","isNaN","prev","handleYearKeyPress","e","key","_e$currentTarget$pare","_e$currentTarget$pare2","currentTarget","inputs","parentElement","querySelectorAll","currentIndex","Array","from","indexOf","nextInput","focus","resetAllFilters","parseYearValue","defaultValue"],"sources":["C:/Users/Selecty/Documents/PetProjects/chronoline-frontend/src/hooks/useFilters.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react'\r\n\r\nexport const useFilters = () => {\r\n  const [filters, setFilters] = useState(() => {\r\n    const savedFilters = localStorage.getItem('chrononinja-filters');\r\n    if (savedFilters) {\r\n      const parsed = JSON.parse(savedFilters);\r\n      return {\r\n        categories: parsed.categories || [],\r\n        countries: parsed.countries || [],\r\n        timeRange: parsed.timeRange || { start: -800, end: 2000 },\r\n        showAchievements: parsed.showAchievements !== undefined ? parsed.showAchievements : true,\r\n        hideEmptyCenturies: parsed.hideEmptyCenturies !== undefined ? parsed.hideEmptyCenturies : false\r\n      };\r\n    }\r\n    return {\r\n      categories: [] as string[],\r\n      countries: [] as string[],\r\n      timeRange: { start: -800, end: 2000 },\r\n      showAchievements: true,\r\n      hideEmptyCenturies: false\r\n    };\r\n  })\r\n\r\n  const [groupingType, setGroupingType] = useState<'category' | 'country' | 'none'>(() => {\r\n    const savedGrouping = localStorage.getItem('chrononinja-grouping');\r\n    return savedGrouping as 'category' | 'country' | 'none' || 'category';\r\n  })\r\n\r\n  const [yearInputs, setYearInputs] = useState({\r\n    start: filters.timeRange.start.toString(),\r\n    end: filters.timeRange.end.toString()\r\n  })\r\n\r\n  // Сохраняем фильтры в localStorage при изменении\r\n  useEffect(() => {\r\n    localStorage.setItem('chrononinja-filters', JSON.stringify(filters));\r\n  }, [filters]);\r\n\r\n  // Сохраняем тип группировки в localStorage при изменении\r\n  useEffect(() => {\r\n    localStorage.setItem('chrononinja-grouping', groupingType);\r\n  }, [groupingType]);\r\n\r\n  // Функция для применения фильтра по году\r\n  const applyYearFilter = useCallback((field: 'start' | 'end', value: string) => {\r\n    const parsed = parseInt(value);\r\n    const numValue = isNaN(parsed) ? (field === 'start' ? -800 : 2000) : parsed;\r\n    setFilters(prev => ({\r\n      ...prev,\r\n      timeRange: { ...prev.timeRange, [field]: numValue }\r\n    }))\r\n  }, [])\r\n\r\n  // Функция для обработки нажатия Enter\r\n  const handleYearKeyPress = useCallback((field: 'start' | 'end', e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      applyYearFilter(field, e.currentTarget.value)\r\n      // Переводим фокус на следующий элемент\r\n      const inputs = e.currentTarget.parentElement?.parentElement?.querySelectorAll('input')\r\n      if (inputs) {\r\n        const currentIndex = Array.from(inputs).indexOf(e.currentTarget)\r\n        const nextInput = inputs[currentIndex + 1] as HTMLInputElement\r\n        if (nextInput) {\r\n          nextInput.focus()\r\n        }\r\n      }\r\n    }\r\n  }, [applyYearFilter])\r\n\r\n  const resetAllFilters = useCallback(() => {\r\n    setFilters({\r\n      categories: [],\r\n      countries: [],\r\n      timeRange: { start: -800, end: 2000 },\r\n      showAchievements: true,\r\n      hideEmptyCenturies: false\r\n    })\r\n    setYearInputs({\r\n      start: '-800',\r\n      end: '2000'\r\n    })\r\n  }, [])\r\n\r\n  const parseYearValue = useCallback((value: string, defaultValue: number): number => {\r\n    const parsed = parseInt(value);\r\n    return isNaN(parsed) ? defaultValue : parsed;\r\n  }, [])\r\n\r\n  return {\r\n    filters,\r\n    setFilters,\r\n    groupingType,\r\n    setGroupingType,\r\n    yearInputs,\r\n    setYearInputs,\r\n    applyYearFilter,\r\n    handleYearKeyPress,\r\n    resetAllFilters,\r\n    parseYearValue\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}