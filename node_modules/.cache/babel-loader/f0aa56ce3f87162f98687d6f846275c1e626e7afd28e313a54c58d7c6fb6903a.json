{"ast":null,"code":"// API configuration\nconst getApiConfig = () => {\n  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ\n  const isDevelopment = process.env.NODE_ENV === 'development';\n  const isLocalBackend = process.env.REACT_APP_USE_LOCAL_BACKEND === 'true';\n\n  // URL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π\n  const LOCAL_BACKEND_URL = 'http://localhost:3001';\n  const REMOTE_BACKEND_URL = 'https://chrono-back-kramushka.amvera.io';\n\n  // –í—ã–±–∏—Ä–∞–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫\n  let apiUrl;\n  if (isDevelopment && isLocalBackend) {\n    apiUrl = LOCAL_BACKEND_URL;\n    console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π backend:', apiUrl);\n  } else {\n    apiUrl = process.env.REACT_APP_API_URL || REMOTE_BACKEND_URL;\n    console.log('üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–Ω—ã–π backend:', apiUrl);\n  }\n  return {\n    baseUrl: apiUrl,\n    timeout: 10000,\n    // 10 —Å–µ–∫—É–Ω–¥\n    retries: 2\n  };\n};\nconst API_CONFIG = getApiConfig();\nconst API_BASE_URL = API_CONFIG.baseUrl;\n\n// Public helper to perform API calls with base URL applied\nexport const apiFetch = (path, options = {}) => {\n  const url = path.startsWith('http') ? path : `${API_BASE_URL}${path}`;\n  return apiRequest(url, options);\n};\n\n// Safe decode function\nconst safeDecode = str => {\n  try {\n    return decodeURIComponent(escape(str));\n  } catch (error) {\n    console.warn('Failed to decode string:', str, error);\n    return str;\n  }\n};\n\n// Helper function for API requests with retry logic\nconst apiRequest = async (url, options = {}) => {\n  let lastError = null;\n  for (let attempt = 0; attempt <= API_CONFIG.retries; attempt++) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.timeout);\n      const response = await fetch(url, {\n        ...options,\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      return response;\n    } catch (error) {\n      lastError = error;\n      console.warn(`API request attempt ${attempt + 1} failed:`, error);\n      if (attempt < API_CONFIG.retries) {\n        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)\n        await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));\n      }\n    }\n  }\n  throw lastError || new Error('API request failed after all retries');\n};\n\n// Types for API responses\n\n// Helper function to build query string from filters\nconst buildQueryString = filters => {\n  const params = new URLSearchParams();\n  if (filters.category) {\n    params.append('category', filters.category);\n  }\n  if (filters.country) {\n    params.append('country', filters.country);\n  }\n  if (filters.startYear !== undefined) {\n    params.append('startYear', filters.startYear.toString());\n  }\n  if (filters.endYear !== undefined) {\n    params.append('endYear', filters.endYear.toString());\n  }\n  return params.toString();\n};\n\n// Get persons with optional filters\nexport const getPersons = async (filters = {}) => {\n  try {\n    const queryString = buildQueryString(filters);\n    const url = `${API_BASE_URL}/api/persons${queryString ? `?${queryString}` : ''}`;\n    const response = await apiRequest(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∫–æ–π\n    let transformedData = data.map(person => ({\n      id: person.id,\n      name: safeDecode(person.name || ''),\n      birthYear: person.birthYear,\n      deathYear: person.deathYear,\n      category: safeDecode(person.category || ''),\n      country: safeDecode(person.country || ''),\n      description: safeDecode(person.description || ''),\n      imageUrl: person.imageUrl,\n      reignStart: person.reignStart,\n      reignEnd: person.reignEnd,\n      achievementYear1: person.achievementYear1,\n      achievementYear2: person.achievementYear2,\n      achievementYear3: person.achievementYear3,\n      achievements: Array.isArray(person.achievements) ? person.achievements.map(a => safeDecode(a || '')) : []\n    }));\n\n    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω\n    if (filters.country) {\n      const selectedCountries = filters.country.split(',').map(c => c.trim());\n      transformedData = transformedData.filter(person => {\n        const personCountries = person.country.includes('/') ? person.country.split('/').map(c => c.trim()) : [person.country];\n        return selectedCountries.some(selected => personCountries.includes(selected));\n      });\n    }\n    return transformedData;\n  } catch (error) {\n    console.error('Error fetching persons:', error);\n    // Return empty array as fallback\n    return [];\n  }\n};\n\n// Get all categories\nexport const getCategories = async () => {\n  try {\n    const url = `${API_BASE_URL}/api/categories`;\n    const response = await apiRequest(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n    return data.map(category => safeDecode(category || ''));\n  } catch (error) {\n    console.error('Error fetching categories:', error);\n    // Return default categories as fallback\n    return ['–ü–æ–ª–∏—Ç–∏–∫', '–£—á–µ–Ω—ã–π', '–•—É–¥–æ–∂–Ω–∏–∫', '–ü–∏—Å–∞—Ç–µ–ª—å', '–í–æ–µ–Ω–∞—á–∞–ª—å–Ω–∏–∫'];\n  }\n};\n\n// Get all countries\nexport const getCountries = async () => {\n  try {\n    const url = `${API_BASE_URL}/api/countries`;\n    const response = await apiRequest(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω –∏ —Ä–∞–∑–±–∏–≤–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω\n    const allCountries = new Set();\n    data.forEach(country => {\n      const decodedCountry = safeDecode(country || '');\n      if (decodedCountry.includes('/')) {\n        // –†–∞–∑–±–∏–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ\n        const countries = decodedCountry.split('/').map(c => c.trim());\n        countries.forEach(c => {\n          if (c) allCountries.add(c);\n        });\n      } else {\n        allCountries.add(decodedCountry);\n      }\n    });\n\n    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É\n    return Array.from(allCountries).sort();\n  } catch (error) {\n    console.error('Error fetching countries:', error);\n    // Return default countries as fallback\n    return ['–î—Ä–µ–≤–Ω–∏–π –†–∏–º', '–î—Ä–µ–≤–Ω—è—è –ì—Ä–µ—Ü–∏—è', '–î—Ä–µ–≤–Ω–∏–π –ï–≥–∏–ø–µ—Ç', '–ö–∏—Ç–∞–π', '–ò–Ω–¥–∏—è'];\n  }\n};\n\n// Test connection to backend\nexport const testBackendConnection = async () => {\n  try {\n    const response = await apiRequest(`${API_BASE_URL}/api/health`);\n    return response.ok;\n  } catch (error) {\n    console.error('Backend connection test failed:', error);\n    return false;\n  }\n};\n\n// Get backend info\nexport const getBackendInfo = () => {\n  return {\n    baseUrl: API_BASE_URL,\n    isLocal: API_BASE_URL.includes('localhost'),\n    config: API_CONFIG\n  };\n};","map":{"version":3,"names":["getApiConfig","isDevelopment","process","env","NODE_ENV","isLocalBackend","REACT_APP_USE_LOCAL_BACKEND","LOCAL_BACKEND_URL","REMOTE_BACKEND_URL","apiUrl","console","log","REACT_APP_API_URL","baseUrl","timeout","retries","API_CONFIG","API_BASE_URL","apiFetch","path","options","url","startsWith","apiRequest","safeDecode","str","decodeURIComponent","escape","error","warn","lastError","attempt","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","Promise","resolve","Math","pow","Error","buildQueryString","filters","params","URLSearchParams","category","append","country","startYear","undefined","toString","endYear","getPersons","queryString","ok","status","data","json","transformedData","map","person","id","name","birthYear","deathYear","description","imageUrl","reignStart","reignEnd","achievementYear1","achievementYear2","achievementYear3","achievements","Array","isArray","a","selectedCountries","split","c","trim","filter","personCountries","includes","some","selected","getCategories","getCountries","allCountries","Set","forEach","decodedCountry","countries","add","from","sort","testBackendConnection","getBackendInfo","isLocal","config"],"sources":["C:/Users/Selecty/Documents/PetProjects/chronoline-frontend/src/services/api.ts"],"sourcesContent":["// API configuration\r\nconst getApiConfig = () => {\r\n  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ\r\n  const isDevelopment = process.env.NODE_ENV === 'development';\r\n  const isLocalBackend = process.env.REACT_APP_USE_LOCAL_BACKEND === 'true';\r\n  \r\n  // URL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π\r\n  const LOCAL_BACKEND_URL = 'http://localhost:3001';\r\n  const REMOTE_BACKEND_URL = 'https://chrono-back-kramushka.amvera.io';\r\n  \r\n  // –í—ã–±–∏—Ä–∞–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫\r\n  let apiUrl: string;\r\n  \r\n  if (isDevelopment && isLocalBackend) {\r\n    apiUrl = LOCAL_BACKEND_URL;\r\n    console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π backend:', apiUrl);\r\n  } else {\r\n    apiUrl = process.env.REACT_APP_API_URL || REMOTE_BACKEND_URL;\r\n    console.log('üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–Ω—ã–π backend:', apiUrl);\r\n  }\r\n  \r\n  return {\r\n    baseUrl: apiUrl,\r\n    timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥\r\n    retries: 2\r\n  };\r\n};\r\n\r\nconst API_CONFIG = getApiConfig();\r\nconst API_BASE_URL = API_CONFIG.baseUrl;\r\n\r\n// Public helper to perform API calls with base URL applied\r\nexport const apiFetch = (path: string, options: RequestInit = {}) => {\r\n  const url = path.startsWith('http') ? path : `${API_BASE_URL}${path}`;\r\n  return apiRequest(url, options);\r\n};\r\n\r\n// Safe decode function\r\nconst safeDecode = (str: string): string => {\r\n  try {\r\n    return decodeURIComponent(escape(str));\r\n  } catch (error) {\r\n    console.warn('Failed to decode string:', str, error);\r\n    return str;\r\n  }\r\n};\r\n\r\n// Helper function for API requests with retry logic\r\nconst apiRequest = async (url: string, options: RequestInit = {}): Promise<Response> => {\r\n  let lastError: Error | null = null;\r\n  \r\n  for (let attempt = 0; attempt <= API_CONFIG.retries; attempt++) {\r\n    try {\r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.timeout);\r\n      \r\n      const response = await fetch(url, {\r\n        ...options,\r\n        signal: controller.signal\r\n      });\r\n      \r\n      clearTimeout(timeoutId);\r\n      return response;\r\n    } catch (error) {\r\n      lastError = error as Error;\r\n      console.warn(`API request attempt ${attempt + 1} failed:`, error);\r\n      \r\n      if (attempt < API_CONFIG.retries) {\r\n        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)\r\n        await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));\r\n      }\r\n    }\r\n  }\r\n  \r\n  throw lastError || new Error('API request failed after all retries');\r\n};\r\n\r\n// Types for API responses\r\ninterface Person {\r\n  id: string;\r\n  name: string;\r\n  birthYear: number;\r\n  deathYear: number;\r\n  category: string;\r\n  country: string;\r\n  description: string;\r\n  imageUrl?: string;\r\n  reignStart?: number;\r\n  reignEnd?: number;\r\n  achievementYear1?: number;\r\n  achievementYear2?: number;\r\n  achievementYear3?: number;\r\n  achievements: string[];\r\n}\r\n\r\ninterface ApiFilters {\r\n  category?: string;\r\n  country?: string;\r\n  startYear?: number;\r\n  endYear?: number;\r\n}\r\n\r\n// Helper function to build query string from filters\r\nconst buildQueryString = (filters: ApiFilters): string => {\r\n  const params = new URLSearchParams();\r\n  \r\n  if (filters.category) {\r\n    params.append('category', filters.category);\r\n  }\r\n  if (filters.country) {\r\n    params.append('country', filters.country);\r\n  }\r\n  if (filters.startYear !== undefined) {\r\n    params.append('startYear', filters.startYear.toString());\r\n  }\r\n  if (filters.endYear !== undefined) {\r\n    params.append('endYear', filters.endYear.toString());\r\n  }\r\n  \r\n  return params.toString();\r\n};\r\n\r\n// Get persons with optional filters\r\nexport const getPersons = async (filters: ApiFilters = {}): Promise<Person[]> => {\r\n  try {\r\n    const queryString = buildQueryString(filters);\r\n    const url = `${API_BASE_URL}/api/persons${queryString ? `?${queryString}` : ''}`;\r\n    \r\n    const response = await apiRequest(url);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∫–æ–π\r\n    let transformedData = data.map((person: {\r\n      id: string;\r\n      name?: string;\r\n      birthYear: number;\r\n      deathYear: number;\r\n      category?: string;\r\n      country?: string;\r\n      description?: string;\r\n      imageUrl?: string;\r\n      reignStart?: number;\r\n      reignEnd?: number;\r\n      achievementYear1?: number;\r\n      achievementYear2?: number;\r\n      achievementYear3?: number;\r\n      achievements?: string[];\r\n    }) => ({\r\n      id: person.id,\r\n      name: safeDecode(person.name || ''),\r\n      birthYear: person.birthYear,\r\n      deathYear: person.deathYear,\r\n      category: safeDecode(person.category || ''),\r\n      country: safeDecode(person.country || ''),\r\n      description: safeDecode(person.description || ''),\r\n      imageUrl: person.imageUrl,\r\n      reignStart: person.reignStart,\r\n      reignEnd: person.reignEnd,\r\n      achievementYear1: person.achievementYear1,\r\n      achievementYear2: person.achievementYear2,\r\n      achievementYear3: person.achievementYear3,\r\n      achievements: Array.isArray(person.achievements) ? person.achievements.map((a: string) => safeDecode(a || '')) : []\r\n    }));\r\n    \r\n    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω\r\n    if (filters.country) {\r\n      const selectedCountries = filters.country.split(',').map((c: string) => c.trim());\r\n      transformedData = transformedData.filter((person: Person) => {\r\n        const personCountries = person.country.includes('/') \r\n          ? person.country.split('/').map((c: string) => c.trim())\r\n          : [person.country];\r\n        return selectedCountries.some((selected: string) => personCountries.includes(selected));\r\n      });\r\n    }\r\n    \r\n    return transformedData;\r\n  } catch (error) {\r\n    console.error('Error fetching persons:', error);\r\n    // Return empty array as fallback\r\n    return [];\r\n  }\r\n};\r\n\r\n// Get all categories\r\nexport const getCategories = async (): Promise<string[]> => {\r\n  try {\r\n    const url = `${API_BASE_URL}/api/categories`;\r\n    const response = await apiRequest(url);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\r\n    return data.map((category: string) => safeDecode(category || ''));\r\n  } catch (error) {\r\n    console.error('Error fetching categories:', error);\r\n    // Return default categories as fallback\r\n    return ['–ü–æ–ª–∏—Ç–∏–∫', '–£—á–µ–Ω—ã–π', '–•—É–¥–æ–∂–Ω–∏–∫', '–ü–∏—Å–∞—Ç–µ–ª—å', '–í–æ–µ–Ω–∞—á–∞–ª—å–Ω–∏–∫'];\r\n  }\r\n};\r\n\r\n// Get all countries\r\nexport const getCountries = async (): Promise<string[]> => {\r\n  try {\r\n    const url = `${API_BASE_URL}/api/countries`;\r\n    const response = await apiRequest(url);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω –∏ —Ä–∞–∑–±–∏–≤–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω\r\n    const allCountries = new Set<string>();\r\n    \r\n    data.forEach((country: string | null) => {\r\n      const decodedCountry = safeDecode(country || '');\r\n      if (decodedCountry.includes('/')) {\r\n        // –†–∞–∑–±–∏–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ\r\n        const countries = decodedCountry.split('/').map(c => c.trim());\r\n        countries.forEach(c => {\r\n          if (c) allCountries.add(c);\r\n        });\r\n      } else {\r\n        allCountries.add(decodedCountry);\r\n      }\r\n    });\r\n    \r\n    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É\r\n    return Array.from(allCountries).sort();\r\n  } catch (error) {\r\n    console.error('Error fetching countries:', error);\r\n    // Return default countries as fallback\r\n    return ['–î—Ä–µ–≤–Ω–∏–π –†–∏–º', '–î—Ä–µ–≤–Ω—è—è –ì—Ä–µ—Ü–∏—è', '–î—Ä–µ–≤–Ω–∏–π –ï–≥–∏–ø–µ—Ç', '–ö–∏—Ç–∞–π', '–ò–Ω–¥–∏—è'];\r\n  }\r\n};\r\n\r\n// Test connection to backend\r\nexport const testBackendConnection = async (): Promise<boolean> => {\r\n  try {\r\n    const response = await apiRequest(`${API_BASE_URL}/api/health`);\r\n    return response.ok;\r\n  } catch (error) {\r\n    console.error('Backend connection test failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Get backend info\r\nexport const getBackendInfo = () => {\r\n  return {\r\n    baseUrl: API_BASE_URL,\r\n    isLocal: API_BASE_URL.includes('localhost'),\r\n    config: API_CONFIG\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}