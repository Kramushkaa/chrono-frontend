{"ast":null,"code":"import { getCategoryColor, getCategoryColorDark, getCategoryColorMuted } from './categoryColors';\nexport const getCategoryPriority = category => {\n  const priorities = {\n    'Правители': 1,\n    'Военачальники': 2,\n    'Ученые': 3,\n    'Художники': 4,\n    'Писатели': 5,\n    'Философы': 6,\n    'Исследователи': 7,\n    'Религиозные деятели': 8,\n    'Музыканты': 9,\n    'Архитекторы': 10\n  };\n  return priorities[category] || 999;\n};\nexport const getGroupColor = groupName => {\n  if (groupName.includes('Правители')) return '#d32f2f';\n  if (groupName.includes('Военачальники')) return '#f57c00';\n  if (groupName.includes('Ученые')) return '#1976d2';\n  if (groupName.includes('Художники')) return '#388e3c';\n  if (groupName.includes('Писатели')) return '#7b1fa2';\n  if (groupName.includes('Философы')) return '#5d4037';\n  if (groupName.includes('Исследователи')) return '#00838f';\n  if (groupName.includes('Религиозные деятели')) return '#c2185b';\n  if (groupName.includes('Музыканты')) return '#ff8f00';\n  if (groupName.includes('Архитекторы')) return '#4e342e';\n\n  // Для стран используем цвета категорий\n  return getCategoryColor(groupName);\n};\nexport const getGroupColorDark = groupName => {\n  if (groupName.includes('Правители')) return '#b71c1c';\n  if (groupName.includes('Военачальники')) return '#e65100';\n  if (groupName.includes('Ученые')) return '#0d47a1';\n  if (groupName.includes('Художники')) return '#1b5e20';\n  if (groupName.includes('Писатели')) return '#4a148c';\n  if (groupName.includes('Философы')) return '#3e2723';\n  if (groupName.includes('Исследователи')) return '#006064';\n  if (groupName.includes('Религиозные деятели')) return '#880e4f';\n  if (groupName.includes('Музыканты')) return '#e65100';\n  if (groupName.includes('Архитекторы')) return '#3e2723';\n\n  // Для стран используем цвета категорий\n  return getCategoryColorDark(groupName);\n};\nexport const getGroupColorMuted = groupName => {\n  if (groupName.includes('Правители')) return '#ffcdd2';\n  if (groupName.includes('Военачальники')) return '#ffe0b2';\n  if (groupName.includes('Ученые')) return '#bbdefb';\n  if (groupName.includes('Художники')) return '#c8e6c9';\n  if (groupName.includes('Писатели')) return '#e1bee7';\n  if (groupName.includes('Философы')) return '#d7ccc8';\n  if (groupName.includes('Исследователи')) return '#b2ebf2';\n  if (groupName.includes('Религиозные деятели')) return '#f8bbd9';\n  if (groupName.includes('Музыканты')) return '#ffe0b2';\n  if (groupName.includes('Архитекторы')) return '#d7ccc8';\n\n  // Для стран используем цвета категорий\n  return getCategoryColorMuted(groupName);\n};\nexport const getPersonGroup = (person, groupingType) => {\n  if (groupingType === 'none') return 'none';\n  if (groupingType === 'category') {\n    return person.category || 'Неизвестно';\n  }\n  if (groupingType === 'country') {\n    return person.country || 'Неизвестно';\n  }\n  return 'none';\n};\nexport const sortGroupedData = (data, groupingType) => {\n  if (groupingType === 'none') {\n    return data.sort((a, b) => a.birthYear - b.birthYear);\n  }\n\n  // Группируем данные\n  const grouped = data.reduce((acc, person) => {\n    const group = getPersonGroup(person, groupingType);\n    if (!acc[group]) {\n      acc[group] = [];\n    }\n    acc[group].push(person);\n    return acc;\n  }, {});\n\n  // Сортируем группы\n  const sortedGroups = Object.keys(grouped).sort((a, b) => {\n    if (groupingType === 'category') {\n      return getCategoryPriority(a) - getCategoryPriority(b);\n    }\n    return a.localeCompare(b);\n  });\n\n  // Сортируем людей внутри групп по году рождения\n  sortedGroups.forEach(group => {\n    grouped[group].sort((a, b) => a.birthYear - b.birthYear);\n  });\n\n  // Возвращаем плоский массив\n  return sortedGroups.flatMap(group => grouped[group]);\n};","map":{"version":3,"names":["getCategoryColor","getCategoryColorDark","getCategoryColorMuted","getCategoryPriority","category","priorities","getGroupColor","groupName","includes","getGroupColorDark","getGroupColorMuted","getPersonGroup","person","groupingType","country","sortGroupedData","data","sort","a","b","birthYear","grouped","reduce","acc","group","push","sortedGroups","Object","keys","localeCompare","forEach","flatMap"],"sources":["C:/Users/Selecty/Documents/PetProjects/chronoline-frontend/src/utils/groupingUtils.ts"],"sourcesContent":["import { Person } from '../types'\r\nimport { getCategoryColor, getCategoryColorDark, getCategoryColorMuted } from './categoryColors'\r\n\r\nexport const getCategoryPriority = (category: string) => {\r\n  const priorities: { [key: string]: number } = {\r\n    'Правители': 1,\r\n    'Военачальники': 2,\r\n    'Ученые': 3,\r\n    'Художники': 4,\r\n    'Писатели': 5,\r\n    'Философы': 6,\r\n    'Исследователи': 7,\r\n    'Религиозные деятели': 8,\r\n    'Музыканты': 9,\r\n    'Архитекторы': 10\r\n  }\r\n  return priorities[category] || 999\r\n}\r\n\r\nexport const getGroupColor = (groupName: string) => {\r\n  if (groupName.includes('Правители')) return '#d32f2f'\r\n  if (groupName.includes('Военачальники')) return '#f57c00'\r\n  if (groupName.includes('Ученые')) return '#1976d2'\r\n  if (groupName.includes('Художники')) return '#388e3c'\r\n  if (groupName.includes('Писатели')) return '#7b1fa2'\r\n  if (groupName.includes('Философы')) return '#5d4037'\r\n  if (groupName.includes('Исследователи')) return '#00838f'\r\n  if (groupName.includes('Религиозные деятели')) return '#c2185b'\r\n  if (groupName.includes('Музыканты')) return '#ff8f00'\r\n  if (groupName.includes('Архитекторы')) return '#4e342e'\r\n  \r\n  // Для стран используем цвета категорий\r\n  return getCategoryColor(groupName)\r\n}\r\n\r\nexport const getGroupColorDark = (groupName: string) => {\r\n  if (groupName.includes('Правители')) return '#b71c1c'\r\n  if (groupName.includes('Военачальники')) return '#e65100'\r\n  if (groupName.includes('Ученые')) return '#0d47a1'\r\n  if (groupName.includes('Художники')) return '#1b5e20'\r\n  if (groupName.includes('Писатели')) return '#4a148c'\r\n  if (groupName.includes('Философы')) return '#3e2723'\r\n  if (groupName.includes('Исследователи')) return '#006064'\r\n  if (groupName.includes('Религиозные деятели')) return '#880e4f'\r\n  if (groupName.includes('Музыканты')) return '#e65100'\r\n  if (groupName.includes('Архитекторы')) return '#3e2723'\r\n  \r\n  // Для стран используем цвета категорий\r\n  return getCategoryColorDark(groupName)\r\n}\r\n\r\nexport const getGroupColorMuted = (groupName: string) => {\r\n  if (groupName.includes('Правители')) return '#ffcdd2'\r\n  if (groupName.includes('Военачальники')) return '#ffe0b2'\r\n  if (groupName.includes('Ученые')) return '#bbdefb'\r\n  if (groupName.includes('Художники')) return '#c8e6c9'\r\n  if (groupName.includes('Писатели')) return '#e1bee7'\r\n  if (groupName.includes('Философы')) return '#d7ccc8'\r\n  if (groupName.includes('Исследователи')) return '#b2ebf2'\r\n  if (groupName.includes('Религиозные деятели')) return '#f8bbd9'\r\n  if (groupName.includes('Музыканты')) return '#ffe0b2'\r\n  if (groupName.includes('Архитекторы')) return '#d7ccc8'\r\n  \r\n  // Для стран используем цвета категорий\r\n  return getCategoryColorMuted(groupName)\r\n}\r\n\r\nexport const getPersonGroup = (person: Person, groupingType: 'category' | 'country' | 'none') => {\r\n  if (groupingType === 'none') return 'none'\r\n  \r\n  if (groupingType === 'category') {\r\n    return person.category || 'Неизвестно'\r\n  }\r\n  \r\n  if (groupingType === 'country') {\r\n    return person.country || 'Неизвестно'\r\n  }\r\n  \r\n  return 'none'\r\n}\r\n\r\nexport const sortGroupedData = (data: Person[], groupingType: 'category' | 'country' | 'none') => {\r\n  if (groupingType === 'none') {\r\n    return data.sort((a, b) => a.birthYear - b.birthYear)\r\n  }\r\n\r\n  // Группируем данные\r\n  const grouped = data.reduce((acc, person) => {\r\n    const group = getPersonGroup(person, groupingType)\r\n    if (!acc[group]) {\r\n      acc[group] = []\r\n    }\r\n    acc[group].push(person)\r\n    return acc\r\n  }, {} as { [key: string]: Person[] })\r\n\r\n  // Сортируем группы\r\n  const sortedGroups = Object.keys(grouped).sort((a, b) => {\r\n    if (groupingType === 'category') {\r\n      return getCategoryPriority(a) - getCategoryPriority(b)\r\n    }\r\n    return a.localeCompare(b)\r\n  })\r\n\r\n  // Сортируем людей внутри групп по году рождения\r\n  sortedGroups.forEach(group => {\r\n    grouped[group].sort((a, b) => a.birthYear - b.birthYear)\r\n  })\r\n\r\n  // Возвращаем плоский массив\r\n  return sortedGroups.flatMap(group => grouped[group])\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}