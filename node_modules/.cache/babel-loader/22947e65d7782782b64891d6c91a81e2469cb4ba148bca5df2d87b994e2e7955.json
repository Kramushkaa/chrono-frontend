{"ast":null,"code":"// API functions for connecting to backend\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://chrono-back-kramushka.amvera.io';\n\n// Safe decode function\nconst safeDecode = str => {\n  try {\n    return decodeURIComponent(escape(str));\n  } catch (error) {\n    console.warn('Failed to decode string:', str, error);\n    return str;\n  }\n};\n\n// Types for API responses\n\n// Helper function to build query string from filters\nconst buildQueryString = filters => {\n  const params = new URLSearchParams();\n  if (filters.category) {\n    params.append('category', filters.category);\n  }\n  if (filters.country) {\n    params.append('country', filters.country);\n  }\n  if (filters.startYear !== undefined) {\n    params.append('startYear', filters.startYear.toString());\n  }\n  if (filters.endYear !== undefined) {\n    params.append('endYear', filters.endYear.toString());\n  }\n  return params.toString();\n};\n\n// Get persons with optional filters\nexport const getPersons = async (filters = {}) => {\n  try {\n    const queryString = buildQueryString(filters);\n    const url = `${API_BASE_URL}/api/persons${queryString ? `?${queryString}` : ''}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // Преобразуем данные в правильный формат с безопасной декодировкой\n    let transformedData = data.map(person => ({\n      id: person.id,\n      name: safeDecode(person.name || ''),\n      birthYear: person.birthYear,\n      deathYear: person.deathYear,\n      category: safeDecode(person.category || ''),\n      country: safeDecode(person.country || ''),\n      description: safeDecode(person.description || ''),\n      imageUrl: person.imageUrl,\n      reignStart: person.reignStart,\n      reignEnd: person.reignEnd,\n      achievementYear1: person.achievementYear1,\n      achievementYear2: person.achievementYear2,\n      achievementYear3: person.achievementYear3,\n      achievements: Array.isArray(person.achievements) ? person.achievements.map(a => safeDecode(a || '')) : []\n    }));\n\n    // Дополнительная фильтрация на клиенте для множественных стран\n    if (filters.country) {\n      const selectedCountries = filters.country.split(',').map(c => c.trim());\n      transformedData = transformedData.filter(person => {\n        const personCountries = person.country.includes('/') ? person.country.split('/').map(c => c.trim()) : [person.country];\n        return selectedCountries.some(selected => personCountries.includes(selected));\n      });\n    }\n    return transformedData;\n  } catch (error) {\n    console.error('Error fetching persons:', error);\n    // Return empty array as fallback\n    return [];\n  }\n};\n\n// Get all categories\nexport const getCategories = async () => {\n  try {\n    const url = `${API_BASE_URL}/api/categories`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // Безопасная декодировка категорий\n    return data.map(category => safeDecode(category || ''));\n  } catch (error) {\n    console.error('Error fetching categories:', error);\n    // Return default categories as fallback\n    return ['Политик', 'Ученый', 'Художник', 'Писатель', 'Военачальник'];\n  }\n};\n\n// Get all countries\nexport const getCountries = async () => {\n  try {\n    const url = `${API_BASE_URL}/api/countries`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // Безопасная декодировка стран и разбивка множественных стран\n    const allCountries = new Set();\n    data.forEach(country => {\n      const decodedCountry = safeDecode(country || '');\n      if (decodedCountry.includes('/')) {\n        // Разбиваем множественные страны на отдельные\n        const countries = decodedCountry.split('/').map(c => c.trim());\n        countries.forEach(c => {\n          if (c) allCountries.add(c);\n        });\n      } else {\n        allCountries.add(decodedCountry);\n      }\n    });\n\n    // Сортируем страны по алфавиту\n    return Array.from(allCountries).sort();\n  } catch (error) {\n    console.error('Error fetching countries:', error);\n    // Return default countries as fallback\n    return ['Древний Рим', 'Древняя Греция', 'Древний Египет', 'Китай', 'Индия'];\n  }\n};\n\n// Test connection to backend\nexport const testBackendConnection = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/health`);\n    return response.ok;\n  } catch (error) {\n    console.error('Backend connection test failed:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","safeDecode","str","decodeURIComponent","escape","error","console","warn","buildQueryString","filters","params","URLSearchParams","category","append","country","startYear","undefined","toString","endYear","getPersons","queryString","url","response","fetch","ok","Error","status","data","json","transformedData","map","person","id","name","birthYear","deathYear","description","imageUrl","reignStart","reignEnd","achievementYear1","achievementYear2","achievementYear3","achievements","Array","isArray","a","selectedCountries","split","c","trim","filter","personCountries","includes","some","selected","getCategories","getCountries","allCountries","Set","forEach","decodedCountry","countries","add","from","sort","testBackendConnection"],"sources":["C:/Users/Selecty/Documents/PetProjects/chronoline-frontend/src/services/api.ts"],"sourcesContent":["// API functions for connecting to backend\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://chrono-back-kramushka.amvera.io';\n\n// Safe decode function\nconst safeDecode = (str: string): string => {\n  try {\n    return decodeURIComponent(escape(str));\n  } catch (error) {\n    console.warn('Failed to decode string:', str, error);\n    return str;\n  }\n};\n\n\n// Types for API responses\ninterface Person {\n  id: string;\n  name: string;\n  birthYear: number;\n  deathYear: number;\n  category: string;\n  country: string;\n  description: string;\n  imageUrl?: string;\n  reignStart?: number;\n  reignEnd?: number;\n  achievementYear1?: number;\n  achievementYear2?: number;\n  achievementYear3?: number;\n  achievements: string[];\n}\n\ninterface ApiFilters {\n  category?: string;\n  country?: string;\n  startYear?: number;\n  endYear?: number;\n}\n\n// Helper function to build query string from filters\nconst buildQueryString = (filters: ApiFilters): string => {\n  const params = new URLSearchParams();\n  \n  if (filters.category) {\n    params.append('category', filters.category);\n  }\n  if (filters.country) {\n    params.append('country', filters.country);\n  }\n  if (filters.startYear !== undefined) {\n    params.append('startYear', filters.startYear.toString());\n  }\n  if (filters.endYear !== undefined) {\n    params.append('endYear', filters.endYear.toString());\n  }\n  \n  return params.toString();\n};\n\n// Get persons with optional filters\nexport const getPersons = async (filters: ApiFilters = {}): Promise<Person[]> => {\n  try {\n    const queryString = buildQueryString(filters);\n    const url = `${API_BASE_URL}/api/persons${queryString ? `?${queryString}` : ''}`;\n    \n    const response = await fetch(url);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Преобразуем данные в правильный формат с безопасной декодировкой\n    let transformedData = data.map((person: {\n      id: string;\n      name?: string;\n      birthYear: number;\n      deathYear: number;\n      category?: string;\n      country?: string;\n      description?: string;\n      imageUrl?: string;\n      reignStart?: number;\n      reignEnd?: number;\n      achievementYear1?: number;\n      achievementYear2?: number;\n      achievementYear3?: number;\n      achievements?: string[];\n    }) => ({\n      id: person.id,\n      name: safeDecode(person.name || ''),\n      birthYear: person.birthYear,\n      deathYear: person.deathYear,\n      category: safeDecode(person.category || ''),\n      country: safeDecode(person.country || ''),\n      description: safeDecode(person.description || ''),\n      imageUrl: person.imageUrl,\n      reignStart: person.reignStart,\n      reignEnd: person.reignEnd,\n      achievementYear1: person.achievementYear1,\n      achievementYear2: person.achievementYear2,\n      achievementYear3: person.achievementYear3,\n      achievements: Array.isArray(person.achievements) ? person.achievements.map((a: any) => safeDecode(a || '')) : []\n    }));\n    \n    // Дополнительная фильтрация на клиенте для множественных стран\n    if (filters.country) {\n      const selectedCountries = filters.country.split(',').map((c: string) => c.trim());\n      transformedData = transformedData.filter((person: Person) => {\n        const personCountries = person.country.includes('/') \n          ? person.country.split('/').map((c: string) => c.trim())\n          : [person.country];\n        return selectedCountries.some((selected: string) => personCountries.includes(selected));\n      });\n    }\n    \n    return transformedData;\n  } catch (error) {\n    console.error('Error fetching persons:', error);\n    // Return empty array as fallback\n    return [];\n  }\n};\n\n// Get all categories\nexport const getCategories = async (): Promise<string[]> => {\n  try {\n    const url = `${API_BASE_URL}/api/categories`;\n    \n    const response = await fetch(url);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Безопасная декодировка категорий\n    return data.map((category: string) => safeDecode(category || ''));\n  } catch (error) {\n    console.error('Error fetching categories:', error);\n    // Return default categories as fallback\n    return ['Политик', 'Ученый', 'Художник', 'Писатель', 'Военачальник'];\n  }\n};\n\n// Get all countries\nexport const getCountries = async (): Promise<string[]> => {\n  try {\n    const url = `${API_BASE_URL}/api/countries`;\n    \n    const response = await fetch(url);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Безопасная декодировка стран и разбивка множественных стран\n    const allCountries = new Set<string>();\n    \n    data.forEach((country: string) => {\n      const decodedCountry = safeDecode(country || '');\n      if (decodedCountry.includes('/')) {\n        // Разбиваем множественные страны на отдельные\n        const countries = decodedCountry.split('/').map(c => c.trim());\n        countries.forEach(c => {\n          if (c) allCountries.add(c);\n        });\n      } else {\n        allCountries.add(decodedCountry);\n      }\n    });\n    \n    // Сортируем страны по алфавиту\n    return Array.from(allCountries).sort();\n  } catch (error) {\n    console.error('Error fetching countries:', error);\n    // Return default countries as fallback\n    return ['Древний Рим', 'Древняя Греция', 'Древний Египет', 'Китай', 'Индия'];\n  }\n};\n\n// Test connection to backend\nexport const testBackendConnection = async (): Promise<boolean> => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/health`);\n    return response.ok;\n  } catch (error) {\n    console.error('Backend connection test failed:', error);\n    return false;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}