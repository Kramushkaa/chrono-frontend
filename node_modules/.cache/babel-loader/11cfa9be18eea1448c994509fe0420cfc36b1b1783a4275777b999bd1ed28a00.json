{"ast":null,"code":"import{useState,useEffect}from'react';import{getPersons,getCategories,getCountries}from'../services/api';export const useTimelineData=filters=>{const[persons,setPersons]=useState([]);const[allCategories,setAllCategories]=useState([]);const[allCountries,setAllCountries]=useState([]);const[isLoading,setIsLoading]=useState(true);useEffect(()=>{const fetchData=async()=>{try{setIsLoading(true);// Формируем параметры для запроса\nconst filtersToApply={};if(filters.categories.length>0){filtersToApply.category=filters.categories.join(',');}if(filters.countries.length>0){filtersToApply.country=filters.countries.join(',');}filtersToApply.startYear=filters.timeRange.start;filtersToApply.endYear=filters.timeRange.end;// Загружаем персон с учетом фильтров\nconst personsData=await getPersons(filtersToApply);setPersons(personsData);// Загружаем категории и страны только если они еще не загружены\nif(allCategories.length===0||allCountries.length===0){const[categoriesData,countriesData]=await Promise.all([getCategories(),getCountries()]);setAllCategories(categoriesData);setAllCountries(countriesData);}}catch(error){console.error(\"Ошибка при загрузке данных:\",error);}finally{setIsLoading(false);}};fetchData();},[filters,allCategories.length,allCountries.length]);return{persons,allCategories,allCountries,isLoading};};","map":{"version":3,"names":["useState","useEffect","getPersons","getCategories","getCountries","useTimelineData","filters","persons","setPersons","allCategories","setAllCategories","allCountries","setAllCountries","isLoading","setIsLoading","fetchData","filtersToApply","categories","length","category","join","countries","country","startYear","timeRange","start","endYear","end","personsData","categoriesData","countriesData","Promise","all","error","console"],"sources":["C:/Users/Selecty/Documents/PetProjects/chronoline-frontend/src/hooks/useTimelineData.ts"],"sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { Person } from '../types'\r\nimport { getPersons, getCategories, getCountries } from '../services/api'\r\n\r\ninterface Filters {\r\n  categories: string[]\r\n  countries: string[]\r\n  timeRange: { start: number; end: number }\r\n  showAchievements: boolean\r\n}\r\n\r\nexport const useTimelineData = (filters: Filters) => {\r\n  const [persons, setPersons] = useState<Person[]>([])\r\n  const [allCategories, setAllCategories] = useState<string[]>([])\r\n  const [allCountries, setAllCountries] = useState<string[]>([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setIsLoading(true)\r\n\r\n        // Формируем параметры для запроса\r\n        const filtersToApply: any = {}\r\n        if (filters.categories.length > 0) {\r\n          filtersToApply.category = filters.categories.join(',')\r\n        }\r\n        if (filters.countries.length > 0) {\r\n          filtersToApply.country = filters.countries.join(',')\r\n        }\r\n        filtersToApply.startYear = filters.timeRange.start\r\n        filtersToApply.endYear = filters.timeRange.end\r\n\r\n        // Загружаем персон с учетом фильтров\r\n        const personsData = await getPersons(filtersToApply)\r\n        setPersons(personsData)\r\n\r\n        // Загружаем категории и страны только если они еще не загружены\r\n        if (allCategories.length === 0 || allCountries.length === 0) {\r\n          const [categoriesData, countriesData] = await Promise.all([\r\n            getCategories(),\r\n            getCountries()\r\n          ])\r\n          setAllCategories(categoriesData)\r\n          setAllCountries(countriesData)\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Ошибка при загрузке данных:\", error)\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [filters, allCategories.length, allCountries.length])\r\n\r\n  return { persons, allCategories, allCountries, isLoading }\r\n} "],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE3C,OAASC,UAAU,CAAEC,aAAa,CAAEC,YAAY,KAAQ,iBAAiB,CASzE,MAAO,MAAM,CAAAC,eAAe,CAAIC,OAAgB,EAAK,CACnD,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGR,QAAQ,CAAW,EAAE,CAAC,CACpD,KAAM,CAACS,aAAa,CAAEC,gBAAgB,CAAC,CAAGV,QAAQ,CAAW,EAAE,CAAC,CAChE,KAAM,CAACW,YAAY,CAAEC,eAAe,CAAC,CAAGZ,QAAQ,CAAW,EAAE,CAAC,CAC9D,KAAM,CAACa,SAAS,CAAEC,YAAY,CAAC,CAAGd,QAAQ,CAAC,IAAI,CAAC,CAEhDC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAc,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACFD,YAAY,CAAC,IAAI,CAAC,CAElB;AACA,KAAM,CAAAE,cAAmB,CAAG,CAAC,CAAC,CAC9B,GAAIV,OAAO,CAACW,UAAU,CAACC,MAAM,CAAG,CAAC,CAAE,CACjCF,cAAc,CAACG,QAAQ,CAAGb,OAAO,CAACW,UAAU,CAACG,IAAI,CAAC,GAAG,CAAC,CACxD,CACA,GAAId,OAAO,CAACe,SAAS,CAACH,MAAM,CAAG,CAAC,CAAE,CAChCF,cAAc,CAACM,OAAO,CAAGhB,OAAO,CAACe,SAAS,CAACD,IAAI,CAAC,GAAG,CAAC,CACtD,CACAJ,cAAc,CAACO,SAAS,CAAGjB,OAAO,CAACkB,SAAS,CAACC,KAAK,CAClDT,cAAc,CAACU,OAAO,CAAGpB,OAAO,CAACkB,SAAS,CAACG,GAAG,CAE9C;AACA,KAAM,CAAAC,WAAW,CAAG,KAAM,CAAA1B,UAAU,CAACc,cAAc,CAAC,CACpDR,UAAU,CAACoB,WAAW,CAAC,CAEvB;AACA,GAAInB,aAAa,CAACS,MAAM,GAAK,CAAC,EAAIP,YAAY,CAACO,MAAM,GAAK,CAAC,CAAE,CAC3D,KAAM,CAACW,cAAc,CAAEC,aAAa,CAAC,CAAG,KAAM,CAAAC,OAAO,CAACC,GAAG,CAAC,CACxD7B,aAAa,CAAC,CAAC,CACfC,YAAY,CAAC,CAAC,CACf,CAAC,CACFM,gBAAgB,CAACmB,cAAc,CAAC,CAChCjB,eAAe,CAACkB,aAAa,CAAC,CAChC,CACF,CAAE,MAAOG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACrD,CAAC,OAAS,CACRnB,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAEDC,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,CAACT,OAAO,CAAEG,aAAa,CAACS,MAAM,CAAEP,YAAY,CAACO,MAAM,CAAC,CAAC,CAExD,MAAO,CAAEX,OAAO,CAAEE,aAAa,CAAEE,YAAY,CAAEE,SAAU,CAAC,CAC5D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}