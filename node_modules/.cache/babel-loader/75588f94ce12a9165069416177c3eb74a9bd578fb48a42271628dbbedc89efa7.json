{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useMemo, useCallback } from 'react';\nimport { getPersons, getCategories, getCountries } from '../services/api';\nexport const useTimelineData = (filters, enabled = true) => {\n  _s();\n  const [persons, setPersons] = useState([]);\n  const [allCategories, setAllCategories] = useState([]);\n  const [allCountries, setAllCountries] = useState([]);\n  const [isLoading, setIsLoading] = useState(enabled);\n\n  // Мемоизируем параметры фильтров для предотвращения лишних запросов\n  const filtersToApply = useMemo(() => {\n    const filtersToApply = {\n      startYear: filters.timeRange.start,\n      endYear: filters.timeRange.end\n    };\n    if (filters.categories.length > 0) {\n      filtersToApply.category = filters.categories.join(',');\n    }\n    if (filters.countries.length > 0) {\n      filtersToApply.country = filters.countries.join(',');\n    }\n    return filtersToApply;\n  }, [filters.categories, filters.countries, filters.timeRange.start, filters.timeRange.end]);\n\n  // Мемоизируем функцию загрузки данных\n  const fetchData = useCallback(async () => {\n    if (!enabled) {\n      setIsLoading(false);\n      return;\n    }\n    try {\n      setIsLoading(true);\n\n      // Загружаем персон с учетом фильтров\n      const personsData = await getPersons(filtersToApply);\n      setPersons(personsData);\n\n      // Загружаем категории и страны только если они еще не загружены\n      if (allCategories.length === 0 || allCountries.length === 0) {\n        const [categoriesData, countriesData] = await Promise.all([getCategories(), getCountries()]);\n        setAllCategories(categoriesData);\n        setAllCountries(countriesData);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при загрузке данных:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [enabled, filtersToApply, allCategories.length, allCountries.length]);\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n  return {\n    persons,\n    allCategories,\n    allCountries,\n    isLoading\n  };\n};\n_s(useTimelineData, \"XZ3sSjSObRsP8K0ojKvtRTdL8JY=\");","map":{"version":3,"names":["useState","useEffect","useMemo","useCallback","getPersons","getCategories","getCountries","useTimelineData","filters","enabled","_s","persons","setPersons","allCategories","setAllCategories","allCountries","setAllCountries","isLoading","setIsLoading","filtersToApply","startYear","timeRange","start","endYear","end","categories","length","category","join","countries","country","fetchData","personsData","categoriesData","countriesData","Promise","all","error","console"],"sources":["C:/Users/Selecty/Documents/PetProjects/chronoline-frontend/src/hooks/useTimelineData.ts"],"sourcesContent":["import { useState, useEffect, useMemo, useCallback } from 'react'\r\nimport { Person } from '../types'\r\nimport { getPersons, getCategories, getCountries } from '../services/api'\r\n\r\ninterface Filters {\r\n  categories: string[]\r\n  countries: string[]\r\n  timeRange: { start: number; end: number }\r\n  showAchievements: boolean\r\n}\r\n\r\nexport const useTimelineData = (filters: Filters, enabled: boolean = true) => {\r\n  const [persons, setPersons] = useState<Person[]>([])\r\n  const [allCategories, setAllCategories] = useState<string[]>([])\r\n  const [allCountries, setAllCountries] = useState<string[]>([])\r\n  const [isLoading, setIsLoading] = useState(enabled)\r\n\r\n  // Мемоизируем параметры фильтров для предотвращения лишних запросов\r\n  const filtersToApply = useMemo(() => {\r\n    const filtersToApply: {\r\n      category?: string;\r\n      country?: string;\r\n      startYear: number;\r\n      endYear: number;\r\n    } = {\r\n      startYear: filters.timeRange.start,\r\n      endYear: filters.timeRange.end\r\n    }\r\n    \r\n    if (filters.categories.length > 0) {\r\n      filtersToApply.category = filters.categories.join(',')\r\n    }\r\n    if (filters.countries.length > 0) {\r\n      filtersToApply.country = filters.countries.join(',')\r\n    }\r\n    \r\n    return filtersToApply\r\n  }, [filters.categories, filters.countries, filters.timeRange.start, filters.timeRange.end])\r\n\r\n  // Мемоизируем функцию загрузки данных\r\n  const fetchData = useCallback(async () => {\r\n    if (!enabled) {\r\n      setIsLoading(false)\r\n      return\r\n    }\r\n    try {\r\n      setIsLoading(true)\r\n\r\n      // Загружаем персон с учетом фильтров\r\n      const personsData = await getPersons(filtersToApply)\r\n      setPersons(personsData)\r\n\r\n      // Загружаем категории и страны только если они еще не загружены\r\n      if (allCategories.length === 0 || allCountries.length === 0) {\r\n        const [categoriesData, countriesData] = await Promise.all([\r\n          getCategories(),\r\n          getCountries()\r\n        ])\r\n        setAllCategories(categoriesData)\r\n        setAllCountries(countriesData)\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Ошибка при загрузке данных:\", error)\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }, [enabled, filtersToApply, allCategories.length, allCountries.length])\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [fetchData])\r\n\r\n  return { persons, allCategories, allCountries, isLoading }\r\n} "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,OAAO,EAAEC,WAAW,QAAQ,OAAO;AAEjE,SAASC,UAAU,EAAEC,aAAa,EAAEC,YAAY,QAAQ,iBAAiB;AASzE,OAAO,MAAMC,eAAe,GAAGA,CAACC,OAAgB,EAAEC,OAAgB,GAAG,IAAI,KAAK;EAAAC,EAAA;EAC5E,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAW,EAAE,CAAC;EACpD,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAW,EAAE,CAAC;EAChE,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAW,EAAE,CAAC;EAC9D,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAACS,OAAO,CAAC;;EAEnD;EACA,MAAMU,cAAc,GAAGjB,OAAO,CAAC,MAAM;IACnC,MAAMiB,cAKL,GAAG;MACFC,SAAS,EAAEZ,OAAO,CAACa,SAAS,CAACC,KAAK;MAClCC,OAAO,EAAEf,OAAO,CAACa,SAAS,CAACG;IAC7B,CAAC;IAED,IAAIhB,OAAO,CAACiB,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;MACjCP,cAAc,CAACQ,QAAQ,GAAGnB,OAAO,CAACiB,UAAU,CAACG,IAAI,CAAC,GAAG,CAAC;IACxD;IACA,IAAIpB,OAAO,CAACqB,SAAS,CAACH,MAAM,GAAG,CAAC,EAAE;MAChCP,cAAc,CAACW,OAAO,GAAGtB,OAAO,CAACqB,SAAS,CAACD,IAAI,CAAC,GAAG,CAAC;IACtD;IAEA,OAAOT,cAAc;EACvB,CAAC,EAAE,CAACX,OAAO,CAACiB,UAAU,EAAEjB,OAAO,CAACqB,SAAS,EAAErB,OAAO,CAACa,SAAS,CAACC,KAAK,EAAEd,OAAO,CAACa,SAAS,CAACG,GAAG,CAAC,CAAC;;EAE3F;EACA,MAAMO,SAAS,GAAG5B,WAAW,CAAC,YAAY;IACxC,IAAI,CAACM,OAAO,EAAE;MACZS,YAAY,CAAC,KAAK,CAAC;MACnB;IACF;IACA,IAAI;MACFA,YAAY,CAAC,IAAI,CAAC;;MAElB;MACA,MAAMc,WAAW,GAAG,MAAM5B,UAAU,CAACe,cAAc,CAAC;MACpDP,UAAU,CAACoB,WAAW,CAAC;;MAEvB;MACA,IAAInB,aAAa,CAACa,MAAM,KAAK,CAAC,IAAIX,YAAY,CAACW,MAAM,KAAK,CAAC,EAAE;QAC3D,MAAM,CAACO,cAAc,EAAEC,aAAa,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACxD/B,aAAa,CAAC,CAAC,EACfC,YAAY,CAAC,CAAC,CACf,CAAC;QACFQ,gBAAgB,CAACmB,cAAc,CAAC;QAChCjB,eAAe,CAACkB,aAAa,CAAC;MAChC;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD,CAAC,SAAS;MACRnB,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACT,OAAO,EAAEU,cAAc,EAAEN,aAAa,CAACa,MAAM,EAAEX,YAAY,CAACW,MAAM,CAAC,CAAC;EAExEzB,SAAS,CAAC,MAAM;IACd8B,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,OAAO;IAAEpB,OAAO;IAAEE,aAAa;IAAEE,YAAY;IAAEE;EAAU,CAAC;AAC5D,CAAC;AAAAP,EAAA,CA9DYH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}