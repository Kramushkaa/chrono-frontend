{"ast":null,"code":"import{useState,useRef,useCallback,useEffect}from'react';export const useTooltip=()=>{const[hoveredPerson,setHoveredPerson]=useState(null);const[mousePosition,setMousePosition]=useState({x:0,y:0});const[showTooltip,setShowTooltip]=useState(false);const[hoveredAchievement,setHoveredAchievement]=useState(null);const[achievementTooltipPosition,setAchievementTooltipPosition]=useState({x:0,y:0});const[showAchievementTooltip,setShowAchievementTooltip]=useState(false);const hoverTimerRef=useRef(null);// Очищаем таймер при размонтировании компонента\nuseEffect(()=>{return()=>{const timer=hoverTimerRef.current;if(timer){clearTimeout(timer);}};},[]);const handlePersonHover=useCallback((person,x,y)=>{if(hoverTimerRef.current){clearTimeout(hoverTimerRef.current);}if(person){setHoveredPerson(person);setMousePosition({x,y});setShowTooltip(true);}else{hoverTimerRef.current=setTimeout(()=>{setShowTooltip(false);setHoveredPerson(null);},200);}},[]);const handleAchievementHover=useCallback((achievement,x,y)=>{if(achievement){setHoveredAchievement(achievement);setAchievementTooltipPosition({x,y});setShowAchievementTooltip(true);}else{setShowAchievementTooltip(false);setHoveredAchievement(null);}},[]);return{hoveredPerson,mousePosition,showTooltip,hoveredAchievement,achievementTooltipPosition,setAchievementTooltipPosition,showAchievementTooltip,hoverTimerRef,handlePersonHover,handleAchievementHover};};","map":{"version":3,"names":["useState","useRef","useCallback","useEffect","useTooltip","hoveredPerson","setHoveredPerson","mousePosition","setMousePosition","x","y","showTooltip","setShowTooltip","hoveredAchievement","setHoveredAchievement","achievementTooltipPosition","setAchievementTooltipPosition","showAchievementTooltip","setShowAchievementTooltip","hoverTimerRef","timer","current","clearTimeout","handlePersonHover","person","setTimeout","handleAchievementHover","achievement"],"sources":["C:/Users/Selecty/Documents/PetProjects/chronoline-frontend/src/hooks/useTooltip.ts"],"sourcesContent":["import { useState, useRef, useCallback, useEffect } from 'react'\r\nimport { Person } from '../types'\r\n\r\nexport const useTooltip = () => {\r\n  const [hoveredPerson, setHoveredPerson] = useState<Person | null>(null)\r\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 })\r\n  const [showTooltip, setShowTooltip] = useState(false)\r\n  const [hoveredAchievement, setHoveredAchievement] = useState<{ person: Person; year: number; index: number } | null>(null)\r\n  const [achievementTooltipPosition, setAchievementTooltipPosition] = useState({ x: 0, y: 0 })\r\n  const [showAchievementTooltip, setShowAchievementTooltip] = useState(false)\r\n  const hoverTimerRef = useRef<NodeJS.Timeout | null>(null)\r\n\r\n  // Очищаем таймер при размонтировании компонента\r\n  useEffect(() => {\r\n    return () => {\r\n      const timer = hoverTimerRef.current;\r\n      if (timer) {\r\n        clearTimeout(timer);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handlePersonHover = useCallback((person: Person | null, x: number, y: number) => {\r\n    if (hoverTimerRef.current) {\r\n      clearTimeout(hoverTimerRef.current);\r\n    }\r\n\r\n    if (person) {\r\n      setHoveredPerson(person);\r\n      setMousePosition({ x, y });\r\n      setShowTooltip(true);\r\n    } else {\r\n      hoverTimerRef.current = setTimeout(() => {\r\n        setShowTooltip(false);\r\n        setHoveredPerson(null);\r\n      }, 200);\r\n    }\r\n  }, [])\r\n\r\n  const handleAchievementHover = useCallback((achievement: { person: Person; year: number; index: number } | null, x: number, y: number) => {\r\n    if (achievement) {\r\n      setHoveredAchievement(achievement);\r\n      setAchievementTooltipPosition({ x, y });\r\n      setShowAchievementTooltip(true);\r\n    } else {\r\n      setShowAchievementTooltip(false);\r\n      setHoveredAchievement(null);\r\n    }\r\n  }, [])\r\n\r\n  return {\r\n    hoveredPerson,\r\n    mousePosition,\r\n    showTooltip,\r\n    hoveredAchievement,\r\n    achievementTooltipPosition,\r\n    setAchievementTooltipPosition,\r\n    showAchievementTooltip,\r\n    hoverTimerRef,\r\n    handlePersonHover,\r\n    handleAchievementHover\r\n  }\r\n} "],"mappings":"AAAA,OAASA,QAAQ,CAAEC,MAAM,CAAEC,WAAW,CAAEC,SAAS,KAAQ,OAAO,CAGhE,MAAO,MAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CAC9B,KAAM,CAACC,aAAa,CAAEC,gBAAgB,CAAC,CAAGN,QAAQ,CAAgB,IAAI,CAAC,CACvE,KAAM,CAACO,aAAa,CAAEC,gBAAgB,CAAC,CAAGR,QAAQ,CAAC,CAAES,CAAC,CAAE,CAAC,CAAEC,CAAC,CAAE,CAAE,CAAC,CAAC,CAClE,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGZ,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACa,kBAAkB,CAAEC,qBAAqB,CAAC,CAAGd,QAAQ,CAAyD,IAAI,CAAC,CAC1H,KAAM,CAACe,0BAA0B,CAAEC,6BAA6B,CAAC,CAAGhB,QAAQ,CAAC,CAAES,CAAC,CAAE,CAAC,CAAEC,CAAC,CAAE,CAAE,CAAC,CAAC,CAC5F,KAAM,CAACO,sBAAsB,CAAEC,yBAAyB,CAAC,CAAGlB,QAAQ,CAAC,KAAK,CAAC,CAC3E,KAAM,CAAAmB,aAAa,CAAGlB,MAAM,CAAwB,IAAI,CAAC,CAEzD;AACAE,SAAS,CAAC,IAAM,CACd,MAAO,IAAM,CACX,KAAM,CAAAiB,KAAK,CAAGD,aAAa,CAACE,OAAO,CACnC,GAAID,KAAK,CAAE,CACTE,YAAY,CAACF,KAAK,CAAC,CACrB,CACF,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAG,iBAAiB,CAAGrB,WAAW,CAAC,CAACsB,MAAqB,CAAEf,CAAS,CAAEC,CAAS,GAAK,CACrF,GAAIS,aAAa,CAACE,OAAO,CAAE,CACzBC,YAAY,CAACH,aAAa,CAACE,OAAO,CAAC,CACrC,CAEA,GAAIG,MAAM,CAAE,CACVlB,gBAAgB,CAACkB,MAAM,CAAC,CACxBhB,gBAAgB,CAAC,CAAEC,CAAC,CAAEC,CAAE,CAAC,CAAC,CAC1BE,cAAc,CAAC,IAAI,CAAC,CACtB,CAAC,IAAM,CACLO,aAAa,CAACE,OAAO,CAAGI,UAAU,CAAC,IAAM,CACvCb,cAAc,CAAC,KAAK,CAAC,CACrBN,gBAAgB,CAAC,IAAI,CAAC,CACxB,CAAC,CAAE,GAAG,CAAC,CACT,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAoB,sBAAsB,CAAGxB,WAAW,CAAC,CAACyB,WAAmE,CAAElB,CAAS,CAAEC,CAAS,GAAK,CACxI,GAAIiB,WAAW,CAAE,CACfb,qBAAqB,CAACa,WAAW,CAAC,CAClCX,6BAA6B,CAAC,CAAEP,CAAC,CAAEC,CAAE,CAAC,CAAC,CACvCQ,yBAAyB,CAAC,IAAI,CAAC,CACjC,CAAC,IAAM,CACLA,yBAAyB,CAAC,KAAK,CAAC,CAChCJ,qBAAqB,CAAC,IAAI,CAAC,CAC7B,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CACLT,aAAa,CACbE,aAAa,CACbI,WAAW,CACXE,kBAAkB,CAClBE,0BAA0B,CAC1BC,6BAA6B,CAC7BC,sBAAsB,CACtBE,aAAa,CACbI,iBAAiB,CACjBG,sBACF,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}