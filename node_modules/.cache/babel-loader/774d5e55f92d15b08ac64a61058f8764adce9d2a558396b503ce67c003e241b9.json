{"ast":null,"code":"import{useState,useEffect,useMemo,useCallback}from'react';import{getPersons,getCategories,getCountries}from'../services/api';export const useTimelineData=function(filters){let enabled=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;const[persons,setPersons]=useState([]);const[allCategories,setAllCategories]=useState([]);const[allCountries,setAllCountries]=useState([]);const[isLoading,setIsLoading]=useState(enabled);// Мемоизируем параметры фильтров для предотвращения лишних запросов\nconst filtersToApply=useMemo(()=>{const filtersToApply={startYear:filters.timeRange.start,endYear:filters.timeRange.end};if(filters.categories.length>0){filtersToApply.category=filters.categories.join(',');}if(filters.countries.length>0){filtersToApply.country=filters.countries.join(',');}return filtersToApply;},[filters.categories,filters.countries,filters.timeRange.start,filters.timeRange.end]);// Мемоизируем функцию загрузки данных\nconst fetchData=useCallback(async()=>{if(!enabled){setIsLoading(false);return;}try{setIsLoading(true);// Загружаем персон с учетом фильтров\nconst personsData=await getPersons(filtersToApply);setPersons(personsData);// Загружаем категории и страны только если они еще не загружены\nif(allCategories.length===0||allCountries.length===0){const[categoriesData,countriesData]=await Promise.all([getCategories(),getCountries()]);setAllCategories(categoriesData);setAllCountries(countriesData);}}catch(error){console.error(\"Ошибка при загрузке данных:\",error);}finally{setIsLoading(false);}},[enabled,filtersToApply,allCategories.length,allCountries.length]);useEffect(()=>{fetchData();},[fetchData]);return{persons,allCategories,allCountries,isLoading};};","map":{"version":3,"names":["useState","useEffect","useMemo","useCallback","getPersons","getCategories","getCountries","useTimelineData","filters","enabled","arguments","length","undefined","persons","setPersons","allCategories","setAllCategories","allCountries","setAllCountries","isLoading","setIsLoading","filtersToApply","startYear","timeRange","start","endYear","end","categories","category","join","countries","country","fetchData","personsData","categoriesData","countriesData","Promise","all","error","console"],"sources":["C:/Users/Selecty/Documents/PetProjects/chronoline-frontend/src/hooks/useTimelineData.ts"],"sourcesContent":["import { useState, useEffect, useMemo, useCallback } from 'react'\r\nimport { Person } from '../types'\r\nimport { getPersons, getCategories, getCountries } from '../services/api'\r\n\r\ninterface Filters {\r\n  categories: string[]\r\n  countries: string[]\r\n  timeRange: { start: number; end: number }\r\n  showAchievements: boolean\r\n}\r\n\r\nexport const useTimelineData = (filters: Filters, enabled: boolean = true) => {\r\n  const [persons, setPersons] = useState<Person[]>([])\r\n  const [allCategories, setAllCategories] = useState<string[]>([])\r\n  const [allCountries, setAllCountries] = useState<string[]>([])\r\n  const [isLoading, setIsLoading] = useState(enabled)\r\n\r\n  // Мемоизируем параметры фильтров для предотвращения лишних запросов\r\n  const filtersToApply = useMemo(() => {\r\n    const filtersToApply: {\r\n      category?: string;\r\n      country?: string;\r\n      startYear: number;\r\n      endYear: number;\r\n    } = {\r\n      startYear: filters.timeRange.start,\r\n      endYear: filters.timeRange.end\r\n    }\r\n    \r\n    if (filters.categories.length > 0) {\r\n      filtersToApply.category = filters.categories.join(',')\r\n    }\r\n    if (filters.countries.length > 0) {\r\n      filtersToApply.country = filters.countries.join(',')\r\n    }\r\n    \r\n    return filtersToApply\r\n  }, [filters.categories, filters.countries, filters.timeRange.start, filters.timeRange.end])\r\n\r\n  // Мемоизируем функцию загрузки данных\r\n  const fetchData = useCallback(async () => {\r\n    if (!enabled) {\r\n      setIsLoading(false)\r\n      return\r\n    }\r\n    try {\r\n      setIsLoading(true)\r\n\r\n      // Загружаем персон с учетом фильтров\r\n      const personsData = await getPersons(filtersToApply)\r\n      setPersons(personsData)\r\n\r\n      // Загружаем категории и страны только если они еще не загружены\r\n      if (allCategories.length === 0 || allCountries.length === 0) {\r\n        const [categoriesData, countriesData] = await Promise.all([\r\n          getCategories(),\r\n          getCountries()\r\n        ])\r\n        setAllCategories(categoriesData)\r\n        setAllCountries(countriesData)\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Ошибка при загрузке данных:\", error)\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }, [enabled, filtersToApply, allCategories.length, allCountries.length])\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [fetchData])\r\n\r\n  return { persons, allCategories, allCountries, isLoading }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}