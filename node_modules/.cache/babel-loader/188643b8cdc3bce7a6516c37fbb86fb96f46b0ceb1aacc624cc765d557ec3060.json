{"ast":null,"code":"// API configuration\nconst getApiConfig=()=>{// Определяем окружение\nconst isDevelopment=process.env.NODE_ENV==='development';const isLocalBackend=process.env.REACT_APP_USE_LOCAL_BACKEND==='true';// URL для разных окружений\nconst LOCAL_BACKEND_URL='http://localhost:3001';const REMOTE_BACKEND_URL='https://chrono-back-kramushka.amvera.io';// Выбираем URL в зависимости от настроек\nlet apiUrl;if(isDevelopment&&isLocalBackend){apiUrl=LOCAL_BACKEND_URL;console.log('🔧 Используется локальный backend:',apiUrl);}else{apiUrl=process.env.REACT_APP_API_URL||REMOTE_BACKEND_URL;console.log('🌐 Используется удаленный backend:',apiUrl);}return{baseUrl:apiUrl,timeout:10000,// 10 секунд\nretries:2};};const API_CONFIG=getApiConfig();const API_BASE_URL=API_CONFIG.baseUrl;// Safe decode function\nconst safeDecode=str=>{try{return decodeURIComponent(escape(str));}catch(error){console.warn('Failed to decode string:',str,error);return str;}};// Helper function for API requests with retry logic\nconst apiRequest=async function(url){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let lastError=null;for(let attempt=0;attempt<=API_CONFIG.retries;attempt++){try{const controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),API_CONFIG.timeout);const response=await fetch(url,{...options,signal:controller.signal});clearTimeout(timeoutId);return response;}catch(error){lastError=error;console.warn(`API request attempt ${attempt+1} failed:`,error);if(attempt<API_CONFIG.retries){// Ждем перед повторной попыткой (экспоненциальная задержка)\nawait new Promise(resolve=>setTimeout(resolve,Math.pow(2,attempt)*1000));}}}throw lastError||new Error('API request failed after all retries');};// Types for API responses\n// Helper function to build query string from filters\nconst buildQueryString=filters=>{const params=new URLSearchParams();if(filters.category){params.append('category',filters.category);}if(filters.country){params.append('country',filters.country);}if(filters.startYear!==undefined){params.append('startYear',filters.startYear.toString());}if(filters.endYear!==undefined){params.append('endYear',filters.endYear.toString());}return params.toString();};// Get persons with optional filters\nexport const getPersons=async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const queryString=buildQueryString(filters);const url=`${API_BASE_URL}/api/persons${queryString?`?${queryString}`:''}`;const response=await apiRequest(url);if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const data=await response.json();// Преобразуем данные в правильный формат с безопасной декодировкой\nlet transformedData=data.map(person=>({id:person.id,name:safeDecode(person.name||''),birthYear:person.birthYear,deathYear:person.deathYear,category:safeDecode(person.category||''),country:safeDecode(person.country||''),description:safeDecode(person.description||''),imageUrl:person.imageUrl,reignStart:person.reignStart,reignEnd:person.reignEnd,achievementYear1:person.achievementYear1,achievementYear2:person.achievementYear2,achievementYear3:person.achievementYear3,achievements:Array.isArray(person.achievements)?person.achievements.map(a=>safeDecode(a||'')):[]}));// Дополнительная фильтрация на клиенте для множественных стран\nif(filters.country){const selectedCountries=filters.country.split(',').map(c=>c.trim());transformedData=transformedData.filter(person=>{const personCountries=person.country.includes('/')?person.country.split('/').map(c=>c.trim()):[person.country];return selectedCountries.some(selected=>personCountries.includes(selected));});}return transformedData;}catch(error){console.error('Error fetching persons:',error);// Return empty array as fallback\nreturn[];}};// Get all categories\nexport const getCategories=async()=>{try{const url=`${API_BASE_URL}/api/categories`;const response=await apiRequest(url);if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const data=await response.json();// Безопасная декодировка категорий\nreturn data.map(category=>safeDecode(category||''));}catch(error){console.error('Error fetching categories:',error);// Return default categories as fallback\nreturn['Политик','Ученый','Художник','Писатель','Военачальник'];}};// Get all countries\nexport const getCountries=async()=>{try{const url=`${API_BASE_URL}/api/countries`;const response=await apiRequest(url);if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const data=await response.json();// Безопасная декодировка стран и разбивка множественных стран\nconst allCountries=new Set();data.forEach(country=>{const decodedCountry=safeDecode(country||'');if(decodedCountry.includes('/')){// Разбиваем множественные страны на отдельные\nconst countries=decodedCountry.split('/').map(c=>c.trim());countries.forEach(c=>{if(c)allCountries.add(c);});}else{allCountries.add(decodedCountry);}});// Сортируем страны по алфавиту\nreturn Array.from(allCountries).sort();}catch(error){console.error('Error fetching countries:',error);// Return default countries as fallback\nreturn['Древний Рим','Древняя Греция','Древний Египет','Китай','Индия'];}};// Test connection to backend\nexport const testBackendConnection=async()=>{try{const response=await apiRequest(`${API_BASE_URL}/api/health`);return response.ok;}catch(error){console.error('Backend connection test failed:',error);return false;}};// Get backend info\nexport const getBackendInfo=()=>{return{baseUrl:API_BASE_URL,isLocal:API_BASE_URL.includes('localhost'),config:API_CONFIG};};// Minimal fetch wrapper used by auth service\nexport async function apiFetch(path,init){const url=`${API_BASE_URL}${path}`;return apiRequest(url,init);}","map":{"version":3,"names":["getApiConfig","isDevelopment","process","env","NODE_ENV","isLocalBackend","REACT_APP_USE_LOCAL_BACKEND","LOCAL_BACKEND_URL","REMOTE_BACKEND_URL","apiUrl","console","log","REACT_APP_API_URL","baseUrl","timeout","retries","API_CONFIG","API_BASE_URL","safeDecode","str","decodeURIComponent","escape","error","warn","apiRequest","url","options","arguments","length","undefined","lastError","attempt","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","Promise","resolve","Math","pow","Error","buildQueryString","filters","params","URLSearchParams","category","append","country","startYear","toString","endYear","getPersons","queryString","ok","status","data","json","transformedData","map","person","id","name","birthYear","deathYear","description","imageUrl","reignStart","reignEnd","achievementYear1","achievementYear2","achievementYear3","achievements","Array","isArray","a","selectedCountries","split","c","trim","filter","personCountries","includes","some","selected","getCategories","getCountries","allCountries","Set","forEach","decodedCountry","countries","add","from","sort","testBackendConnection","getBackendInfo","isLocal","config","apiFetch","path","init"],"sources":["C:/Users/Selecty/Documents/PetProjects/chronoline-frontend/src/services/api.ts"],"sourcesContent":["// API configuration\nconst getApiConfig = () => {\n  // Определяем окружение\n  const isDevelopment = process.env.NODE_ENV === 'development';\n  const isLocalBackend = process.env.REACT_APP_USE_LOCAL_BACKEND === 'true';\n  \n  // URL для разных окружений\n  const LOCAL_BACKEND_URL = 'http://localhost:3001';\n  const REMOTE_BACKEND_URL = 'https://chrono-back-kramushka.amvera.io';\n  \n  // Выбираем URL в зависимости от настроек\n  let apiUrl: string;\n  \n  if (isDevelopment && isLocalBackend) {\n    apiUrl = LOCAL_BACKEND_URL;\n    console.log('🔧 Используется локальный backend:', apiUrl);\n  } else {\n    apiUrl = process.env.REACT_APP_API_URL || REMOTE_BACKEND_URL;\n    console.log('🌐 Используется удаленный backend:', apiUrl);\n  }\n  \n  return {\n    baseUrl: apiUrl,\n    timeout: 10000, // 10 секунд\n    retries: 2\n  };\n};\n\nconst API_CONFIG = getApiConfig();\nconst API_BASE_URL = API_CONFIG.baseUrl;\n\n// Safe decode function\nconst safeDecode = (str: string): string => {\n  try {\n    return decodeURIComponent(escape(str));\n  } catch (error) {\n    console.warn('Failed to decode string:', str, error);\n    return str;\n  }\n};\n\n// Helper function for API requests with retry logic\nconst apiRequest = async (url: string, options: RequestInit = {}): Promise<Response> => {\n  let lastError: Error | null = null;\n  \n  for (let attempt = 0; attempt <= API_CONFIG.retries; attempt++) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.timeout);\n      \n      const response = await fetch(url, {\n        ...options,\n        signal: controller.signal\n      });\n      \n      clearTimeout(timeoutId);\n      return response;\n    } catch (error) {\n      lastError = error as Error;\n      console.warn(`API request attempt ${attempt + 1} failed:`, error);\n      \n      if (attempt < API_CONFIG.retries) {\n        // Ждем перед повторной попыткой (экспоненциальная задержка)\n        await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));\n      }\n    }\n  }\n  \n  throw lastError || new Error('API request failed after all retries');\n};\n\n// Types for API responses\ninterface Person {\n  id: string;\n  name: string;\n  birthYear: number;\n  deathYear: number;\n  category: string;\n  country: string;\n  description: string;\n  imageUrl?: string;\n  reignStart?: number;\n  reignEnd?: number;\n  achievementYear1?: number;\n  achievementYear2?: number;\n  achievementYear3?: number;\n  achievements: string[];\n}\n\ninterface ApiFilters {\n  category?: string;\n  country?: string;\n  startYear?: number;\n  endYear?: number;\n}\n\n// Helper function to build query string from filters\nconst buildQueryString = (filters: ApiFilters): string => {\n  const params = new URLSearchParams();\n  \n  if (filters.category) {\n    params.append('category', filters.category);\n  }\n  if (filters.country) {\n    params.append('country', filters.country);\n  }\n  if (filters.startYear !== undefined) {\n    params.append('startYear', filters.startYear.toString());\n  }\n  if (filters.endYear !== undefined) {\n    params.append('endYear', filters.endYear.toString());\n  }\n  \n  return params.toString();\n};\n\n// Get persons with optional filters\nexport const getPersons = async (filters: ApiFilters = {}): Promise<Person[]> => {\n  try {\n    const queryString = buildQueryString(filters);\n    const url = `${API_BASE_URL}/api/persons${queryString ? `?${queryString}` : ''}`;\n    \n    const response = await apiRequest(url);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Преобразуем данные в правильный формат с безопасной декодировкой\n    let transformedData = data.map((person: {\n      id: string;\n      name?: string;\n      birthYear: number;\n      deathYear: number;\n      category?: string;\n      country?: string;\n      description?: string;\n      imageUrl?: string;\n      reignStart?: number;\n      reignEnd?: number;\n      achievementYear1?: number;\n      achievementYear2?: number;\n      achievementYear3?: number;\n      achievements?: string[];\n    }) => ({\n      id: person.id,\n      name: safeDecode(person.name || ''),\n      birthYear: person.birthYear,\n      deathYear: person.deathYear,\n      category: safeDecode(person.category || ''),\n      country: safeDecode(person.country || ''),\n      description: safeDecode(person.description || ''),\n      imageUrl: person.imageUrl,\n      reignStart: person.reignStart,\n      reignEnd: person.reignEnd,\n      achievementYear1: person.achievementYear1,\n      achievementYear2: person.achievementYear2,\n      achievementYear3: person.achievementYear3,\n      achievements: Array.isArray(person.achievements) ? person.achievements.map((a: string) => safeDecode(a || '')) : []\n    }));\n    \n    // Дополнительная фильтрация на клиенте для множественных стран\n    if (filters.country) {\n      const selectedCountries = filters.country.split(',').map((c: string) => c.trim());\n      transformedData = transformedData.filter((person: Person) => {\n        const personCountries = person.country.includes('/') \n          ? person.country.split('/').map((c: string) => c.trim())\n          : [person.country];\n        return selectedCountries.some((selected: string) => personCountries.includes(selected));\n      });\n    }\n    \n    return transformedData;\n  } catch (error) {\n    console.error('Error fetching persons:', error);\n    // Return empty array as fallback\n    return [];\n  }\n};\n\n// Get all categories\nexport const getCategories = async (): Promise<string[]> => {\n  try {\n    const url = `${API_BASE_URL}/api/categories`;\n    const response = await apiRequest(url);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Безопасная декодировка категорий\n    return data.map((category: string) => safeDecode(category || ''));\n  } catch (error) {\n    console.error('Error fetching categories:', error);\n    // Return default categories as fallback\n    return ['Политик', 'Ученый', 'Художник', 'Писатель', 'Военачальник'];\n  }\n};\n\n// Get all countries\nexport const getCountries = async (): Promise<string[]> => {\n  try {\n    const url = `${API_BASE_URL}/api/countries`;\n    const response = await apiRequest(url);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Безопасная декодировка стран и разбивка множественных стран\n    const allCountries = new Set<string>();\n    \n    data.forEach((country: string | null) => {\n      const decodedCountry = safeDecode(country || '');\n      if (decodedCountry.includes('/')) {\n        // Разбиваем множественные страны на отдельные\n        const countries = decodedCountry.split('/').map(c => c.trim());\n        countries.forEach(c => {\n          if (c) allCountries.add(c);\n        });\n      } else {\n        allCountries.add(decodedCountry);\n      }\n    });\n    \n    // Сортируем страны по алфавиту\n    return Array.from(allCountries).sort();\n  } catch (error) {\n    console.error('Error fetching countries:', error);\n    // Return default countries as fallback\n    return ['Древний Рим', 'Древняя Греция', 'Древний Египет', 'Китай', 'Индия'];\n  }\n};\n\n// Test connection to backend\nexport const testBackendConnection = async (): Promise<boolean> => {\n  try {\n    const response = await apiRequest(`${API_BASE_URL}/api/health`);\n    return response.ok;\n  } catch (error) {\n    console.error('Backend connection test failed:', error);\n    return false;\n  }\n};\n\n// Get backend info\nexport const getBackendInfo = () => {\n  return {\n    baseUrl: API_BASE_URL,\n    isLocal: API_BASE_URL.includes('localhost'),\n    config: API_CONFIG\n  };\n}; \n\n// Minimal fetch wrapper used by auth service\nexport async function apiFetch(path: string, init?: RequestInit) {\n  const url = `${API_BASE_URL}${path}`;\n  return apiRequest(url, init);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}