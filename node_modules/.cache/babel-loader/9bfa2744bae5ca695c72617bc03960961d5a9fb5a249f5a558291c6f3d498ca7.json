{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';export const useFilters=()=>{const[filters,setFilters]=useState(()=>{const savedFilters=localStorage.getItem('chrononinja-filters');if(savedFilters){const parsed=JSON.parse(savedFilters);return{categories:parsed.categories||[],countries:parsed.countries||[],timeRange:parsed.timeRange||{start:-800,end:2000},showAchievements:parsed.showAchievements!==undefined?parsed.showAchievements:true,hideEmptyCenturies:parsed.hideEmptyCenturies!==undefined?parsed.hideEmptyCenturies:false};}return{categories:[],countries:[],timeRange:{start:-800,end:2000},showAchievements:true,hideEmptyCenturies:false};});const[groupingType,setGroupingType]=useState(()=>{const savedGrouping=localStorage.getItem('chrononinja-grouping');return savedGrouping||'category';});const[yearInputs,setYearInputs]=useState({start:filters.timeRange.start.toString(),end:filters.timeRange.end.toString()});// Сохраняем фильтры в localStorage при изменении\nuseEffect(()=>{localStorage.setItem('chrononinja-filters',JSON.stringify(filters));},[filters]);// Сохраняем тип группировки в localStorage при изменении\nuseEffect(()=>{localStorage.setItem('chrononinja-grouping',groupingType);},[groupingType]);// Функция для применения фильтра по году\nconst applyYearFilter=useCallback((field,value)=>{const parsed=parseInt(value);const numValue=isNaN(parsed)?field==='start'?-800:2000:parsed;setFilters(prev=>({...prev,timeRange:{...prev.timeRange,[field]:numValue}}));},[]);// Функция для обработки нажатия Enter\nconst handleYearKeyPress=useCallback((field,e)=>{if(e.key==='Enter'){var _e$currentTarget$pare,_e$currentTarget$pare2;applyYearFilter(field,e.currentTarget.value);// Переводим фокус на следующий элемент\nconst inputs=(_e$currentTarget$pare=e.currentTarget.parentElement)===null||_e$currentTarget$pare===void 0?void 0:(_e$currentTarget$pare2=_e$currentTarget$pare.parentElement)===null||_e$currentTarget$pare2===void 0?void 0:_e$currentTarget$pare2.querySelectorAll('input');if(inputs){const currentIndex=Array.from(inputs).indexOf(e.currentTarget);const nextInput=inputs[currentIndex+1];if(nextInput){nextInput.focus();}}}},[applyYearFilter]);const resetAllFilters=useCallback(()=>{setFilters({categories:[],countries:[],timeRange:{start:-800,end:2000},showAchievements:true,hideEmptyCenturies:false});setYearInputs({start:'-800',end:'2000'});},[]);const parseYearValue=useCallback((value,defaultValue)=>{const parsed=parseInt(value);return isNaN(parsed)?defaultValue:parsed;},[]);return{filters,setFilters,groupingType,setGroupingType,yearInputs,setYearInputs,applyYearFilter,handleYearKeyPress,resetAllFilters,parseYearValue};};","map":{"version":3,"names":["useState","useEffect","useCallback","useFilters","filters","setFilters","savedFilters","localStorage","getItem","parsed","JSON","parse","categories","countries","timeRange","start","end","showAchievements","undefined","hideEmptyCenturies","groupingType","setGroupingType","savedGrouping","yearInputs","setYearInputs","toString","setItem","stringify","applyYearFilter","field","value","parseInt","numValue","isNaN","prev","handleYearKeyPress","e","key","_e$currentTarget$pare","_e$currentTarget$pare2","currentTarget","inputs","parentElement","querySelectorAll","currentIndex","Array","from","indexOf","nextInput","focus","resetAllFilters","parseYearValue","defaultValue"],"sources":["C:/Users/Selecty/Documents/PetProjects/chronoline-frontend/src/hooks/useFilters.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react'\r\n\r\nexport const useFilters = () => {\r\n  const [filters, setFilters] = useState(() => {\r\n    const savedFilters = localStorage.getItem('chrononinja-filters');\r\n    if (savedFilters) {\r\n      const parsed = JSON.parse(savedFilters);\r\n      return {\r\n        categories: parsed.categories || [],\r\n        countries: parsed.countries || [],\r\n        timeRange: parsed.timeRange || { start: -800, end: 2000 },\r\n        showAchievements: parsed.showAchievements !== undefined ? parsed.showAchievements : true,\r\n        hideEmptyCenturies: parsed.hideEmptyCenturies !== undefined ? parsed.hideEmptyCenturies : false\r\n      };\r\n    }\r\n    return {\r\n      categories: [] as string[],\r\n      countries: [] as string[],\r\n      timeRange: { start: -800, end: 2000 },\r\n      showAchievements: true,\r\n      hideEmptyCenturies: false\r\n    };\r\n  })\r\n\r\n  const [groupingType, setGroupingType] = useState<'category' | 'country' | 'none'>(() => {\r\n    const savedGrouping = localStorage.getItem('chrononinja-grouping');\r\n    return savedGrouping as 'category' | 'country' | 'none' || 'category';\r\n  })\r\n\r\n  const [yearInputs, setYearInputs] = useState({\r\n    start: filters.timeRange.start.toString(),\r\n    end: filters.timeRange.end.toString()\r\n  })\r\n\r\n  // Сохраняем фильтры в localStorage при изменении\r\n  useEffect(() => {\r\n    localStorage.setItem('chrononinja-filters', JSON.stringify(filters));\r\n  }, [filters]);\r\n\r\n  // Сохраняем тип группировки в localStorage при изменении\r\n  useEffect(() => {\r\n    localStorage.setItem('chrononinja-grouping', groupingType);\r\n  }, [groupingType]);\r\n\r\n  // Функция для применения фильтра по году\r\n  const applyYearFilter = useCallback((field: 'start' | 'end', value: string) => {\r\n    const parsed = parseInt(value);\r\n    const numValue = isNaN(parsed) ? (field === 'start' ? -800 : 2000) : parsed;\r\n    setFilters(prev => ({\r\n      ...prev,\r\n      timeRange: { ...prev.timeRange, [field]: numValue }\r\n    }))\r\n  }, [])\r\n\r\n  // Функция для обработки нажатия Enter\r\n  const handleYearKeyPress = useCallback((field: 'start' | 'end', e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      applyYearFilter(field, e.currentTarget.value)\r\n      // Переводим фокус на следующий элемент\r\n      const inputs = e.currentTarget.parentElement?.parentElement?.querySelectorAll('input')\r\n      if (inputs) {\r\n        const currentIndex = Array.from(inputs).indexOf(e.currentTarget)\r\n        const nextInput = inputs[currentIndex + 1] as HTMLInputElement\r\n        if (nextInput) {\r\n          nextInput.focus()\r\n        }\r\n      }\r\n    }\r\n  }, [applyYearFilter])\r\n\r\n  const resetAllFilters = useCallback(() => {\r\n    setFilters({\r\n      categories: [],\r\n      countries: [],\r\n      timeRange: { start: -800, end: 2000 },\r\n      showAchievements: true,\r\n      hideEmptyCenturies: false\r\n    })\r\n    setYearInputs({\r\n      start: '-800',\r\n      end: '2000'\r\n    })\r\n  }, [])\r\n\r\n  const parseYearValue = useCallback((value: string, defaultValue: number): number => {\r\n    const parsed = parseInt(value);\r\n    return isNaN(parsed) ? defaultValue : parsed;\r\n  }, [])\r\n\r\n  return {\r\n    filters,\r\n    setFilters,\r\n    groupingType,\r\n    setGroupingType,\r\n    yearInputs,\r\n    setYearInputs,\r\n    applyYearFilter,\r\n    handleYearKeyPress,\r\n    resetAllFilters,\r\n    parseYearValue\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}